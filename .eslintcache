[{"/home/mintian/pku/vis/paper_management_system/src/Store/createStoreV0128.js":"1","/home/mintian/pku/vis/paper_management_system/src/reportWebVitals.js":"2","/home/mintian/pku/vis/paper_management_system/src/App.js":"3","/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/UnitView/PaperTooltip.js":"4","/home/mintian/pku/vis/paper_management_system/src/Common/mustInclude.js":"5","/home/mintian/pku/vis/paper_management_system/src/index.js":"6","/home/mintian/pku/vis/paper_management_system/src/Components/Header/index.js":"7","/home/mintian/pku/vis/paper_management_system/src/Hooks/useClientRect.js":"8","/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/index.js":"9","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/index.js":"10","/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/UnitView/index.js":"11","/home/mintian/pku/vis/paper_management_system/src/Common/mostCommon.js":"12","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/TagView/index.js":"13","/home/mintian/pku/vis/paper_management_system/src/Common/svgPadding.js":"14","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/HighlightListView/index.js":"15","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/DetailView/index.js":"16","/home/mintian/pku/vis/paper_management_system/src/Server/index.js":"17","/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/DetailView/index.js":"18","/home/mintian/pku/vis/paper_management_system/src/Store/index.js":"19","/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/ControlView/index.js":"20","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/TagView-Hor/index.js":"21","/home/mintian/pku/vis/paper_management_system/src/Components/TimeLine/index.js":"22","/home/mintian/pku/vis/paper_management_system/src/Hooks/index.js":"23","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/TagView-Hor/TagFilter/index.js":"24","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/ProjectView/index.js":"25"},{"size":17904,"mtime":1620176986120,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1611393161130,"results":"28","hashOfConfig":"27"},{"size":843,"mtime":1619858994140,"results":"29","hashOfConfig":"27"},{"size":922,"mtime":1619013938750,"results":"30","hashOfConfig":"27"},{"size":396,"mtime":1619403512360,"results":"31","hashOfConfig":"27"},{"size":529,"mtime":1611497147020,"results":"32","hashOfConfig":"27"},{"size":1347,"mtime":1619403512360,"results":"33","hashOfConfig":"27"},{"size":464,"mtime":1620014674850,"results":"34","hashOfConfig":"27"},{"size":777,"mtime":1619421498810,"results":"35","hashOfConfig":"27"},{"size":1288,"mtime":1619960361790,"results":"36","hashOfConfig":"27"},{"size":10370,"mtime":1619403512360,"results":"37","hashOfConfig":"27"},{"size":572,"mtime":1619403512370,"results":"38","hashOfConfig":"27"},{"size":2270,"mtime":1619403512360,"results":"39","hashOfConfig":"27"},{"size":203,"mtime":1619403512360,"results":"40","hashOfConfig":"27"},{"size":1514,"mtime":1619575709880,"results":"41","hashOfConfig":"27"},{"size":1140,"mtime":1619532614540,"results":"42","hashOfConfig":"27"},{"size":1967,"mtime":1620312799360,"results":"43","hashOfConfig":"27"},{"size":6077,"mtime":1619571936690,"results":"44","hashOfConfig":"27"},{"size":532,"mtime":1611837041990,"results":"45","hashOfConfig":"27"},{"size":2593,"mtime":1619403512360,"results":"46","hashOfConfig":"27"},{"size":2402,"mtime":1620034978230,"results":"47","hashOfConfig":"27"},{"size":5228,"mtime":1619960324680,"results":"48","hashOfConfig":"27"},{"size":115,"mtime":1619403512360,"results":"49","hashOfConfig":"27"},{"size":2297,"mtime":1620034122100,"results":"50","hashOfConfig":"27"},{"size":3335,"mtime":1620177452020,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},"1bkbmzn",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/mintian/pku/vis/paper_management_system/src/Store/createStoreV0128.js",["111"],"import * as d3 from \"d3\";\nimport { toJS, runInAction } from \"mobx\";\nimport {\n  getPapers,\n  setPublicTags,\n  setPrivateTags,\n  getPublicTags,\n  getPrivateTags,\n  getLdaRes,\n} from \"Server\";\nimport { get } from \"lodash\";\nimport { mostCommon, mustInclude } from \"Common\";\n\nconst debug = true;\n\nconst attr2func = {\n  publicTags: setPublicTags,\n  privateTags: setPrivateTags,\n  read: setPrivateTags,\n};\n\nconst createStore = () => {\n  return {\n    currentPage: \"Management\",\n    setCurrentPage() {\n      this.currentPage = window.location.hash.includes(\"/analysis\")\n        ? \"Analysis\"\n        : \"Management\";\n    },\n    tooltipX: 500,\n    tooltipY: 500,\n    setTooltipPos(x = -1, y = -1) {\n      this.tooltipX = x;\n      this.tooltipY = y;\n    },\n    titleSearch: \"\",\n    setTitleSearch(text) {\n      this.titleSearch = text.toLocaleLowerCase();\n    },\n    get searchPaperDoiSet() {\n      const searchPaperDois = this.titleSearch\n        ? this.papers\n            .filter(\n              (paper) =>\n                paper.title.toLocaleLowerCase().indexOf(this.titleSearch) > -1\n            )\n            .map((paper) => paper.doi)\n        : [];\n      const searchPaperDoiSet = new Set(searchPaperDois);\n      return searchPaperDoiSet;\n    },\n    papers: [],\n    commonAuthors: [],\n    commonCountries: [],\n    commonPublicTags: [],\n    commonPrivateTags: [],\n    async initPapers() {\n      if (this.papers.length === 0) {\n        const papers = await getPapers();\n        this.setPapers(papers);\n      }\n    },\n    async setPapers(papers, compareAttr = \"citationCount\") {\n      debug && console.log(\"==> 初始化Papers\");\n      const doi2paper = {};\n      papers.forEach((paper) => {\n        // 初始化，一些特殊处理，比如如果没有doi或者引用量，就安排一个\n        // if (paper.doi === \"#\") paper.doi = `tmp-${i}`;\n        // if (paper.CitationCount === \"\") paper.CitationCount = 0;\n        // if (paper.Countries === \"#\" || paper.Countries === \"###\")\n        //   paper.Countries = \"\";\n        paper.privateTags = [];\n        paper.projection = [5, 5];\n        paper.topics = [];\n        paper.read = false;\n        paper.publicTags = [];\n        // paper.keywords = [];\n        paper.colors = [];\n        paper.innerColors = [];\n        paper.outerColors = [];\n        paper.internalRefList = [];\n        paper.internalCitedList = [];\n        paper.refList = paper.refList\n          .toLowerCase()\n          // .split(\";\")\n          .split(/[,;]/)\n          .map((a) => a.trim());\n        doi2paper[paper.doi] = paper;\n\n        // 提取authors\n        paper.authors = paper.authors\n          .split(\";\")\n          .map((a) => a.trim().replace(/\\{(.*)\\}/, \"$1\"));\n\n        // 提取countries\n        paper.countries = paper.countries\n          .split(\";\")\n          .map((s) => {\n            const part = s\n              .trim()\n              .split(\" \")\n              .map((a) => a.trim())\n              .filter((a) => a);\n            if (part.length === 0) return \"\";\n            let country = part[part.length - 1]\n              .toLowerCase()\n              .replace(/^\\w/, (s) => s.toUpperCase());\n            return country;\n          })\n          .filter((a) => a);\n\n        paper.keywords = paper.keywords\n          .split(/[;,]/)\n          .map((word) => word.trim().toLowerCase());\n      });\n\n      papers.forEach((paper) => {\n        paper.refList.forEach((ref) => {\n          if (ref in doi2paper) {\n            const refPaper = doi2paper[ref];\n            refPaper.internalCitedList.push(paper.doi);\n            paper.internalRefList.push(ref);\n          }\n        });\n      });\n\n      this.commonAuthors = mostCommon(\n        papers.map((paper) => paper.authors),\n        30\n      );\n      // console.log(\n      //   \"Authors Tags: \",\n      //   mostCommon(\n      //     papers.map((paper) => paper.authors),\n      //     100\n      //   )\n      // );\n      this.commonCountries = mostCommon(\n        papers.map((paper) => paper.countries),\n        30\n      );\n\n      // 先按引用量排序，再去统计分组的排序，这个时间消耗其实还挺大的。\n      papers.sort((a, b) => b[compareAttr] - a[compareAttr]);\n\n      // 开始计算位置\n      this.computedPosition(papers);\n      await this.initPublicTags(papers);\n\n      runInAction(() => {\n        this.papers = papers;\n        this.initPrivateTags();\n      });\n    },\n    setPaper(doi, attr, value) {\n      const paper = this.papers.find((p) => p.doi === doi);\n      paper[attr] = value;\n      // if (attr === \"read\") {\n      //   if (value) {\n      //     paper.privateTags.push(\"read\");\n      //   } else {\n      //     paper.privateTags = [...paper.privateTags].filter(\n      //       (a) => a !== \"read\"\n      //     );\n      //   }\n      // }\n      debug && console.log(\"==> 更新paper数据 by doi:\", doi, attr, value);\n      // attr === \"publicTags\" && setPublicTags(doi, value);\n      attr2func[attr]({\n        uid: this.userId,\n        pid: doi,\n        paper: toJS(paper),\n      });\n      this.doiUpdateColors(doi);\n    },\n    unitXAttr: \"year\",\n    get unitXAttrList() {\n      const xAttrSet = new Set();\n      this.papers.forEach((paper) => {\n        xAttrSet.add(paper[this.unitXAttr]);\n      });\n      const xAttrList = Array.from(xAttrSet);\n      xAttrList.sort((a, b) => b - a);\n      return xAttrList;\n    },\n    unitYAttr: \"conferenceName\",\n    get unitYAttrList() {\n      return [\"SciVis\", \"InfoVis\", \"EuroVis\", \"VAST\", \"PacificVis\"];\n      // const yAttrSet = new Set();\n      // this.papers.forEach((paper) => {\n      //   yAttrSet.add(paper[this.unitYAttr]);\n      // });\n      // const yAttrList = Array.from(yAttrSet);\n      // yAttrList.sort();\n      // return yAttrList;\n    },\n    maxUnitBlockPaperCount: 0,\n    unitBlockCount: {},\n    computedPosition(papers) {\n      // 每一个block有多少单元\n      const unitBlockCount = {};\n      papers.forEach((paper) => {\n        const xAttr = paper[this.unitXAttr];\n        const yAttr = paper[this.unitYAttr];\n        if (!(xAttr in unitBlockCount)) unitBlockCount[xAttr] = {};\n        if (!(yAttr in unitBlockCount[xAttr])) unitBlockCount[xAttr][yAttr] = 0;\n        paper.unitIndex = unitBlockCount[xAttr][yAttr];\n        unitBlockCount[xAttr][yAttr] += 1;\n      });\n      this.maxUnitBlockPaperCount =\n        Math.max(...papers.map((paper) => paper.unitIndex)) * 0.6;\n      this.unitBlockCount = unitBlockCount;\n    },\n\n    async initPublicTags(papers) {\n      const publicTags = await getPublicTags();\n      papers.forEach((paper) => {\n        if (paper.doi in publicTags) {\n          paper.publicTags = publicTags[paper.doi].filter((a) => a);\n        }\n      });\n      runInAction(() => {\n        this.commonPublicTags = mostCommon(Object.values(publicTags), 30);\n      });\n    },\n    async initPrivateTags() {\n      const privateTags = await getPrivateTags({ uid: this.userId });\n\n      runInAction(() => {\n        this.papers.forEach((paper) => {\n          if (paper.doi in privateTags) {\n            const readIndex = privateTags[paper.doi].indexOf(\"read\");\n            if (readIndex > -1) {\n              paper.read = true;\n              privateTags[paper.doi].splice(readIndex, 1);\n            }\n            paper.privateTags = privateTags[paper.doi].filter((a) => a);\n          }\n        });\n        this.commonPrivateTags = mostCommon(Object.values(privateTags), 30);\n      });\n\n      this.batchUpdateColors();\n    },\n\n    userId: \"\",\n    setUserId(userId) {\n      if (userId !== this.userId) {\n        this.userId = userId;\n        debug && console.log(\"==> change userId:\", this.userId);\n        localStorage.setItem(\"paper-management-system-userId\", userId);\n        userId && this.initPrivateTags();\n      }\n    },\n    initUserId() {\n      if (this.userId.length === 0) {\n        const userId = localStorage.getItem(\"paper-management-system-userId\");\n        userId && this.setUserId(userId);\n      }\n    },\n\n    get controlTagNameList() {\n      return this.generateCategory(10);\n    },\n    get anaCategories() {\n      return this.generateCategory(18, true);\n    },\n\n    get commonKeywords() {\n      return mostCommon(\n        this.papers.map((paper) => paper.keywords),\n        30\n      );\n    },\n    generateCategory(count, have_read = false) {\n      const countries = mustInclude(\n        this.commonCountries,\n        [\"Japan\", \"Korea\"],\n        count\n      );\n      const authors = mustInclude(this.commonAuthors, [\"Xiaoru Yuan\"], count);\n      const privateTags = mustInclude(\n        this.commonPrivateTags,\n        have_read ? [\"read\"] : [],\n        count\n      );\n      const publicTags = mustInclude(this.commonPublicTags, [], count);\n      const keywords = mustInclude(this.commonKeywords, [], count);\n      return [\n        {\n          label: \"Country\",\n          value: \"countries\",\n          list: countries,\n          highlightType: \"outer\",\n        },\n        {\n          label: \"Author\",\n          value: \"authors\",\n          list: authors,\n          highlightType: \"inner\",\n        },\n        {\n          label: \"Keywords\",\n          value: \"keywords\",\n          list: keywords,\n          highlightType: \"inner\",\n        },\n        {\n          label: \"Private Tag\",\n          value: \"privateTags\",\n          list: privateTags,\n          highlightType: \"inner\",\n        },\n        {\n          label: \"Public Tag\",\n          value: \"publicTags\",\n          list: publicTags,\n          highlightType: \"inner\",\n        },\n      ];\n    },\n    get category2highlightType() {\n      const category2highlightType = {};\n      this.controlTagNameList.forEach((category) => {\n        category2highlightType[category.value] = category.highlightType;\n      });\n      return category2highlightType;\n    },\n    activeTags: {\n      countries: [],\n      authors: [],\n      privateTags: [],\n      publicTags: [],\n      keywords: [],\n    },\n    // 判断 至少有一个控制器被激活\n    get controlIsActive() {\n      let ans = false;\n      for (let key in this.activeTags) {\n        if (this.activeTags[key].length > 0) {\n          ans = true;\n        }\n      }\n      return ans;\n    },\n    // 判断 至少有一个outer被激活\n    get isUnitOuterHighlight() {\n      const outerCategories = this.controlTagNameList\n        .filter((category) => category.highlightType === \"outer\")\n        .map((category) => category.value);\n      let isUnitOuterHighlight = false;\n      outerCategories.forEach((outerCategory) => {\n        if (this.activeTags[outerCategory].length > 0)\n          isUnitOuterHighlight = true;\n      });\n      return isUnitOuterHighlight;\n    },\n    tag2color: {},\n    colorUse: {},\n    setTagColor(tag, category) {\n      debug && console.log(\"==> 设置tag颜色:\", category, tag);\n      const fullTag = `${category}---${tag}`;\n      if (fullTag in this.tag2color) {\n        // 回收该颜色\n        this.colorUse[this.tag2color[fullTag]] = false;\n        delete this.tag2color[fullTag];\n        this.activeTags[category] = [...this.activeTags[category]].filter(\n          (a) => a !== tag\n        );\n      } else {\n        // 分配一个新的颜色\n        this.activeTags[category].push(tag);\n        let i = 0;\n        let _color = d3.schemeTableau10[i];\n        while (this.colorUse[_color]) {\n          i += 1;\n          if (i === 10) {\n            _color = \"black\";\n            break;\n          }\n          _color = d3.schemeTableau10[i];\n        }\n        this.tag2color[fullTag] = _color;\n        this.colorUse[_color] = true;\n      }\n      this.batchUpdateColors();\n    },\n    batchUpdateColors() {\n      this.papers.forEach((paper) => {\n        paper.colors = [];\n        paper.innerColors = [];\n        paper.outerColors = [];\n        this.updateColor(paper);\n      });\n    },\n    doiUpdateColors(doi) {\n      const paper = this.papers.find((p) => p.doi === doi);\n      paper.colors = [];\n      paper.innerColors = [];\n      paper.outerColors = [];\n      this.updateColor(paper);\n    },\n    updateColor(paper) {\n      const isReadTagActive = this.activeTags.privateTags.indexOf(\"read\") > -1;\n      if (isReadTagActive && paper.read) {\n        paper.colors.push(this.tag2color[\"privateTags---read\"]);\n        paper.innerColors.push(this.tag2color[\"privateTags---read\"]);\n      }\n\n      for (let category in this.activeTags) {\n        const hightlightAttrs = this.activeTags[category];\n        if (this.category2highlightType[category] === \"inner\") {\n          hightlightAttrs.forEach((attr) => {\n            if (paper[category].indexOf(attr) > -1) {\n              const fullTag = `${category}---${attr}`;\n              paper.innerColors.push(this.tag2color[fullTag]);\n            }\n          });\n        } else {\n          hightlightAttrs.forEach((attr) => {\n            if (paper[category].indexOf(attr) > -1) {\n              const fullTag = `${category}---${attr}`;\n              paper.outerColors.push(this.tag2color[fullTag]);\n            }\n          });\n        }\n        hightlightAttrs.forEach((attr) => {\n          if (paper[category].indexOf(attr) > -1) {\n            const fullTag = `${category}---${attr}`;\n            paper.colors.push(this.tag2color[fullTag]);\n          }\n        });\n      }\n    },\n    maxCitationCount: 200,\n\n    currentSelected: \"\",\n    currentSelectedRefSet: new Set(),\n    currentSelectedCitedSet: new Set(),\n    isSelected: false,\n    setCurrentSelected(doi) {\n      debug && console.log(\"==> 选中文章:\", doi);\n      this.currentSelected = doi;\n      this.isSelected = !!doi;\n\n      const paper = this.papers.find((paper) => paper.doi === doi);\n      this.currentSelectedRefSet = new Set(paper.internalRefList);\n      this.currentSelectedCitedSet = new Set(paper.internalCitedList);\n    },\n    cancelSelect() {\n      debug && console.log(\"==> 点击背景，取消论文选中状态\");\n      this.isSelected = false;\n    },\n    get currentSelectedPaper() {\n      return this.papers.find((paper) => paper.doi === this.currentSelected);\n    },\n\n    get analysisPapers() {\n      return this.controlIsActive\n        ? this.papers.filter(\n            (paper) =>\n              paper.innerColors.length > 0 || paper.outerColors.length > 0\n          )\n        : this.papers;\n    },\n    get anaTimeData() {\n      const timeList = this.unitXAttrList.map((a) => +a).sort();\n      return timeList.map((year) => ({\n        x: year,\n        all: this.analysisPapers.filter((paper) => +paper.year === year).length,\n        highlight: this.anaHighPapers.filter((paper) => +paper.year === year)\n          .length,\n      }));\n    },\n\n    get anaTagViewData() {\n      return this.anaCategories.map((category) => {\n        const { label, value } = category;\n        const data = category.list.map((tag) =>\n          tag === \"read\"\n            ? {\n                label: \"read\",\n                all: this.analysisPapers.filter((paper) => paper.read).length,\n                highlight: this.anaHighPapers.filter((paper) => paper.read)\n                  .length,\n              }\n            : {\n                label: tag,\n                all: this.analysisPapers.filter((paper) =>\n                  paper[category.value].includes(tag)\n                ).length,\n                highlight: this.anaHighPapers.filter((paper) =>\n                  paper[category.value].includes(tag)\n                ).length,\n              }\n        );\n        return {\n          label,\n          value,\n          data,\n        };\n      });\n    },\n\n    anaFilterType: \"none\", // \"none\", \"year\", \"tag\", \"topic\", \"lasso\"\n    setAnaFilterType(type) {\n      debug && console.log(\"setAnaFilterType\", type);\n      this.anaFilterType = type;\n    },\n    clearBrushTrigger: () => {},\n    setClearBrushTrigger(fn) {\n      this.clearBrushTrigger = fn;\n    },\n\n    anaHighCate: \"\",\n    anaHighTag: \"\",\n    anaHighPapers: [],\n    setAnaHighPapersByTag({ anaHighCate, anaHighTag }) {\n      debug && console.log(\"setAnaHighPapersByTag\", anaHighCate, anaHighTag);\n      this.clearBrushTrigger();\n      // this.setAnaHighPapersByYear([0, 0])\n      if (this.anaHighCate === anaHighCate && this.anaHighTag === anaHighTag) {\n        this.anaHighTag = \"none\";\n        this.setAnaFilterType(\"none\");\n      } else {\n        this.anaHighCate = anaHighCate;\n        this.anaHighTag = anaHighTag;\n        this.setAnaFilterType(anaHighCate);\n        this.anaHighPapers = this.analysisPapers.filter((paper) =>\n          get(paper, anaHighCate, []).includes(anaHighTag)\n        );\n      }\n    },\n    setAnaHighPapersByYear(yearRange) {\n      debug && console.log(\"setAnaHighPapersByYear\", yearRange);\n      // this.setAnaFilterType('year');\n      const [yearStart, yearEnd] = yearRange;\n      this.anaHighTag = `${yearStart}-${yearEnd}`;\n      this.anaHighPapers = this.analysisPapers.filter(\n        (paper) => +paper.year >= yearStart && +paper.year <= yearEnd\n      );\n    },\n    anaSelectHighlightPaper: {},\n    setAnaSelectHighlightPaper(paper) {\n      debug && console.log(\"setAnaSelectHighlightPaper\", toJS(paper));\n      this.anaSelectHighlightPaper = paper;\n    },\n\n    drawProjectionFlag: false,\n    resetProjectionFlag() {\n      this.drawProjectionFlag = false\n    },\n    num_topics: 5,\n    tryLda() {\n      const dois = this.analysisPapers.map((paper) => paper.doi);\n      const uid = this.userId;\n      const num_topics = this.num_topics;\n      getLdaRes({ dois, uid, num_topics }).then((data) => {\n        runInAction(() => {\n          // console.log(\"data\", data);\n          const { paper_lda_res, topics_detail } = data;\n          this.analysisPapers.forEach((paper) => {\n            if (paper.doi in paper_lda_res) {\n              paper.projection = paper_lda_res[paper.doi].projection;\n              paper.topics = paper_lda_res[paper.doi].topics;\n            } else {\n              paper.projection = [5, 5];\n              paper.topics = [];\n            }\n          });\n          this.drawProjectionFlag = true;\n        });\n      });\n    },\n  };\n};\n\nexport default createStore;\n",["112","113"],"/home/mintian/pku/vis/paper_management_system/src/reportWebVitals.js",[],["114","115"],"/home/mintian/pku/vis/paper_management_system/src/App.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/UnitView/PaperTooltip.js",[],"/home/mintian/pku/vis/paper_management_system/src/Common/mustInclude.js",[],"/home/mintian/pku/vis/paper_management_system/src/index.js",[],["116","117"],"/home/mintian/pku/vis/paper_management_system/src/Components/Header/index.js",[],["118","119"],"/home/mintian/pku/vis/paper_management_system/src/Hooks/useClientRect.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/index.js",["120"],"import React, { useEffect } from \"react\";\nimport { useGlobalStore } from \"Store\";\n\nimport ControlView from \"./ControlView\";\nimport UnitView from \"./UnitView\";\nimport DetailView from \"./DetailView\";\n\nconst ManagePage = () => {\n  const store = useGlobalStore();\n  useEffect(() => {\n    store.setCurrentPage();\n    store.initPapers();\n    store.initUserId();\n  }, []);\n  return (\n    <div className=\"main-container\">\n      <div className=\"control-main-container\">\n        <div className=\"control-view-container\">\n          <ControlView />\n        </div>\n        <div className=\"unit-view-container\">\n          <UnitView />\n        </div>\n      </div>\n      <div className=\"detail-view-container\">\n        <DetailView />\n      </div>\n    </div>\n  );\n};\n\nexport default ManagePage;\n",["121","122"],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/index.js",["123"],"/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/UnitView/index.js",[],"/home/mintian/pku/vis/paper_management_system/src/Common/mostCommon.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/TagView/index.js",[],"/home/mintian/pku/vis/paper_management_system/src/Common/svgPadding.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/HighlightListView/index.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/DetailView/index.js",[],["124","125"],"/home/mintian/pku/vis/paper_management_system/src/Server/index.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/DetailView/index.js",[],"/home/mintian/pku/vis/paper_management_system/src/Store/index.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/ControlView/index.js",["126"],"import React, { useState, useEffect } from \"react\";\nimport \"./index.scss\";\nimport { useGlobalStore } from \"Store\";\nimport { observer } from \"mobx-react-lite\";\n// import { toJS } from \"mobx\";\nimport SearchView from \"../SearchView\";\n\nconst ControlView = observer(() => {\n  const store = useGlobalStore();\n  const { controlTagNameList } = store;\n  return (\n    <div className=\"control-view\">\n      <div className=\"control-item\">\n        <div className=\"control-item-title\">Title Search</div>\n        <div className=\"control-item-options\">\n          <SearchView searchAttr={\"title\"} />\n        </div>\n      </div>\n\n      {controlTagNameList.map((tag) => (\n        <ControlItem key={tag.label} tagData={tag} />\n      ))}\n    </div>\n  );\n});\n\nexport default ControlView;\n\nconst ControlItem = observer(({ tagData }) => {\n  const store = useGlobalStore();\n  const { tag2color } = store;\n\n  const [tags, setTags] = useState([]);\n  // 又是一个外挂逻辑，从ana界面切回来以后，需要初始化tag item，理论上这个应该放在store统一处理\n  useEffect(() => {\n    const initTags = Object.keys(tag2color)\n      .filter((tag) => tag.split(\"---\")[0] === tagData.value)\n      .map((tag) => tag.split(\"---\")[1])\n      .filter((tag) => tagData.list.indexOf(tag) > -1);\n    setTags(initTags);\n  }, []);\n  const handleClickOption = (value) => {\n    const currentTags = [...tags];\n    const index = currentTags.indexOf(value);\n    if (index > -1) {\n      currentTags.splice(index, 1);\n      setTags(currentTags);\n    } else {\n      currentTags.push(value);\n      setTags(currentTags);\n    }\n    store.setTagColor(value, tagData.value);\n  };\n\n  return (\n    <div className=\"control-item\">\n      <div className=\"control-item-title\">{tagData.label}</div>\n      <div className=\"control-item-options\">\n        {tagData.list.map((item) => (\n          <ControlOption\n            key={item}\n            value={item}\n            clickOption={handleClickOption}\n            isSelect={\n              tags.indexOf(item) > -1 && tag2color[`${tagData.value}---${item}`]\n            }\n          />\n        ))}\n      </div>\n    </div>\n  );\n});\n\nconst ControlOption = ({ value, clickOption, isSelect }) => {\n  const className = [\"control-item-option\", isSelect && \"option-active\"]\n    .filter((a) => a)\n    .join(\" \");\n  const style = isSelect\n    ? { background: isSelect, border: `1px solid ${isSelect}` }\n    : {};\n  const value_format = value === \"Usa\" ? \"USA\" : value;\n  return (\n    <div className={className} onClick={() => clickOption(value)} style={style}>\n      {value_format}\n    </div>\n  );\n};\n","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/TagView-Hor/index.js",[],"/home/mintian/pku/vis/paper_management_system/src/Components/TimeLine/index.js",["127","128","129","130","131"],"/home/mintian/pku/vis/paper_management_system/src/Hooks/index.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/TagView-Hor/TagFilter/index.js",["132","133","134"],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/ProjectView/index.js",["135","136"],{"ruleId":"137","severity":1,"message":"138","line":561,"column":34,"nodeType":"139","messageId":"140","endLine":561,"endColumn":47},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"141","replacedBy":"145"},{"ruleId":"143","replacedBy":"146"},{"ruleId":"141","replacedBy":"147"},{"ruleId":"143","replacedBy":"148"},{"ruleId":"141","replacedBy":"149"},{"ruleId":"143","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":14,"column":6,"nodeType":"153","endLine":14,"endColumn":8,"suggestions":"154"},{"ruleId":"141","replacedBy":"155"},{"ruleId":"143","replacedBy":"156"},{"ruleId":"151","severity":1,"message":"152","line":18,"column":6,"nodeType":"153","endLine":18,"endColumn":8,"suggestions":"157"},{"ruleId":"141","replacedBy":"158"},{"ruleId":"143","replacedBy":"159"},{"ruleId":"151","severity":1,"message":"160","line":41,"column":6,"nodeType":"153","endLine":41,"endColumn":8,"suggestions":"161"},{"ruleId":"151","severity":1,"message":"162","line":25,"column":8,"nodeType":"153","endLine":25,"endColumn":10,"suggestions":"163"},{"ruleId":"137","severity":1,"message":"164","line":70,"column":13,"nodeType":"139","messageId":"140","endLine":70,"endColumn":27},{"ruleId":"151","severity":1,"message":"165","line":134,"column":8,"nodeType":"153","endLine":134,"endColumn":20,"suggestions":"166"},{"ruleId":"137","severity":1,"message":"167","line":160,"column":15,"nodeType":"139","messageId":"140","endLine":160,"endColumn":28},{"ruleId":"151","severity":1,"message":"168","line":169,"column":8,"nodeType":"153","endLine":169,"endColumn":29,"suggestions":"169"},{"ruleId":"137","severity":1,"message":"170","line":1,"column":23,"nodeType":"139","messageId":"140","endLine":1,"endColumn":31},{"ruleId":"137","severity":1,"message":"171","line":4,"column":10,"nodeType":"139","messageId":"140","endLine":4,"endColumn":23},{"ruleId":"137","severity":1,"message":"172","line":6,"column":10,"nodeType":"139","messageId":"140","endLine":6,"endColumn":23},{"ruleId":"151","severity":1,"message":"152","line":24,"column":6,"nodeType":"153","endLine":24,"endColumn":8,"suggestions":"173"},{"ruleId":"151","severity":1,"message":"174","line":111,"column":6,"nodeType":"153","endLine":111,"endColumn":76,"suggestions":"175"},"no-unused-vars","'topics_detail' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["176"],"no-negated-in-lhs",["177"],["176"],["177"],["176"],["177"],["176"],["177"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'store'. Either include it or remove the dependency array.","ArrayExpression",["178"],["176"],["177"],["179"],["176"],["177"],"React Hook useEffect has missing dependencies: 'tag2color', 'tagData.list', and 'tagData.value'. Either include them or remove the dependency array.",["180"],"React Hook useEffect has missing dependencies: 'initYearRange' and 'onInput'. Either include them or remove the dependency array. If 'onInput' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["181"],"'highlightBarsG' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data', 'height', 'initYearRange', 'onChange', 'onInput', 'setAnaFilterType', 'setClearBrushTrigger', and 'width'. Either include them or remove the dependency array. If 'setClearBrushTrigger' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["182"],"'highlightBars' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'height' and 'width'. Either include them or remove the dependency array.",["183"],"'useState' is defined but never used.","'useClientRect' is defined but never used.","'anaSvgPadding' is defined but never used.",["184"],"React Hook useEffect has missing dependencies: 'height' and 'resetProjectionFlag'. Either include them or remove the dependency array.",["185"],"no-global-assign","no-unsafe-negation",{"desc":"186","fix":"187"},{"desc":"186","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"186","fix":"197"},{"desc":"198","fix":"199"},"Update the dependencies array to be: [store]",{"range":"200","text":"201"},{"range":"202","text":"201"},"Update the dependencies array to be: [tag2color, tagData.list, tagData.value]",{"range":"203","text":"204"},"Update the dependencies array to be: [initYearRange, onInput]",{"range":"205","text":"206"},"Update the dependencies array to be: [clientRect, data, height, initYearRange, onChange, onInput, setAnaFilterType, setClearBrushTrigger, width]",{"range":"207","text":"208"},"Update the dependencies array to be: [data, anaFilterType, width, height]",{"range":"209","text":"210"},{"range":"211","text":"201"},"Update the dependencies array to be: [width, drawProjectionFlag, num_topics, analysisPapers, anaHighPapers, height, resetProjectionFlag]",{"range":"212","text":"213"},[361,363],"[store]",[554,556],[1230,1232],"[tag2color, tagData.list, tagData.value]",[692,694],"[initYearRange, onInput]",[3993,4005],"[clientRect, data, height, initYearRange, onChange, onInput, setAnaFilterType, setClearBrushTrigger, width]",[5101,5122],"[data, anaFilterType, width, height]",[594,596],[3173,3243],"[width, drawProjectionFlag, num_topics, analysisPapers, anaHighPapers, height, resetProjectionFlag]"]
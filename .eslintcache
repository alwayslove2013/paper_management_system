[{"/home/mintian/pku/vis/paper_management_system/src/Store/createStoreV0128.js":"1","/home/mintian/pku/vis/paper_management_system/src/reportWebVitals.js":"2","/home/mintian/pku/vis/paper_management_system/src/App.js":"3","/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/UnitView/PaperTooltip.js":"4","/home/mintian/pku/vis/paper_management_system/src/Common/mustInclude.js":"5","/home/mintian/pku/vis/paper_management_system/src/index.js":"6","/home/mintian/pku/vis/paper_management_system/src/Components/Header/index.js":"7","/home/mintian/pku/vis/paper_management_system/src/Hooks/useClientRect.js":"8","/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/index.js":"9","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/index.js":"10","/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/UnitView/index.js":"11","/home/mintian/pku/vis/paper_management_system/src/Common/mostCommon.js":"12","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/TagView/index.js":"13","/home/mintian/pku/vis/paper_management_system/src/Common/svgPadding.js":"14","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/HighlightListView/index.js":"15","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/DetailView/index.js":"16","/home/mintian/pku/vis/paper_management_system/src/Server/index.js":"17","/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/DetailView/index.js":"18","/home/mintian/pku/vis/paper_management_system/src/Store/index.js":"19","/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/ControlView/index.js":"20","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/TagView-Hor/index.js":"21","/home/mintian/pku/vis/paper_management_system/src/Components/TimeLine/index.js":"22","/home/mintian/pku/vis/paper_management_system/src/Hooks/index.js":"23","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/TagView-Hor/TagFilter/index.js":"24","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/ProjectView/index.js":"25","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/TopicView/index.js":"26","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/NetworkView/index.js":"27","/home/mintian/pku/vis/paper_management_system/src/Common/find_d.js":"28","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/ProjectView-New/index.js":"29","/home/mintian/pku/vis/paper_management_system/src/Common/userList.js":"30","/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/UnitView/CircleUnit.js":"31","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/NetworkView-New/index.js":"32","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/StatisticsView/index.js":"33","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/PapersTable/index.js":"34","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/TopicView-New/index.js":"35","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/HoverTooltip/index.js":"36"},{"size":25865,"mtime":1625560262200,"results":"37","hashOfConfig":"38"},{"size":362,"mtime":1611393161130,"results":"39","hashOfConfig":"38"},{"size":843,"mtime":1621827382150,"results":"40","hashOfConfig":"38"},{"size":922,"mtime":1621827382170,"results":"41","hashOfConfig":"38"},{"size":396,"mtime":1621827382160,"results":"42","hashOfConfig":"38"},{"size":529,"mtime":1611497147020,"results":"43","hashOfConfig":"38"},{"size":3387,"mtime":1625582284220,"results":"44","hashOfConfig":"38"},{"size":464,"mtime":1621827382160,"results":"45","hashOfConfig":"38"},{"size":777,"mtime":1621827382170,"results":"46","hashOfConfig":"38"},{"size":1667,"mtime":1625479819330,"results":"47","hashOfConfig":"38"},{"size":10464,"mtime":1623420564440,"results":"48","hashOfConfig":"38"},{"size":572,"mtime":1621827382160,"results":"49","hashOfConfig":"38"},{"size":2270,"mtime":1619403512360,"results":"50","hashOfConfig":"38"},{"size":203,"mtime":1621827382160,"results":"51","hashOfConfig":"38"},{"size":1752,"mtime":1621827382160,"results":"52","hashOfConfig":"38"},{"size":1140,"mtime":1621827382160,"results":"53","hashOfConfig":"38"},{"size":3167,"mtime":1625577716390,"results":"54","hashOfConfig":"38"},{"size":8165,"mtime":1621946301870,"results":"55","hashOfConfig":"38"},{"size":532,"mtime":1611837041990,"results":"56","hashOfConfig":"38"},{"size":2843,"mtime":1621827382160,"results":"57","hashOfConfig":"38"},{"size":2402,"mtime":1621827382160,"results":"58","hashOfConfig":"38"},{"size":5231,"mtime":1621827382160,"results":"59","hashOfConfig":"38"},{"size":115,"mtime":1619403512360,"results":"60","hashOfConfig":"38"},{"size":2326,"mtime":1620403696650,"results":"61","hashOfConfig":"38"},{"size":16331,"mtime":1620898490970,"results":"62","hashOfConfig":"38"},{"size":1945,"mtime":1621827382160,"results":"63","hashOfConfig":"38"},{"size":7808,"mtime":1620709263651,"results":"64","hashOfConfig":"38"},{"size":1259,"mtime":1621827382150,"results":"65","hashOfConfig":"38"},{"size":16640,"mtime":1625539518170,"results":"66","hashOfConfig":"38"},{"size":436,"mtime":1611919580460,"results":"67","hashOfConfig":"38"},{"size":4314,"mtime":1621827382170,"results":"68","hashOfConfig":"38"},{"size":12830,"mtime":1625582900070,"results":"69","hashOfConfig":"38"},{"size":20148,"mtime":1625576876980,"results":"70","hashOfConfig":"38"},{"size":4440,"mtime":1625579327820,"results":"71","hashOfConfig":"38"},{"size":3584,"mtime":1625582388550,"results":"72","hashOfConfig":"38"},{"size":1971,"mtime":1625539883250,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1bkbmzn",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/mintian/pku/vis/paper_management_system/src/Store/createStoreV0128.js",["164","165","166","167","168"],"/home/mintian/pku/vis/paper_management_system/src/reportWebVitals.js",[],["169","170"],"/home/mintian/pku/vis/paper_management_system/src/App.js",[],["171","172"],"/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/UnitView/PaperTooltip.js",[],["173","174"],"/home/mintian/pku/vis/paper_management_system/src/Common/mustInclude.js",[],"/home/mintian/pku/vis/paper_management_system/src/index.js",[],["175","176"],"/home/mintian/pku/vis/paper_management_system/src/Components/Header/index.js",[],"/home/mintian/pku/vis/paper_management_system/src/Hooks/useClientRect.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/index.js",["177"],"import React, { useEffect } from \"react\";\nimport { useGlobalStore } from \"Store\";\n\nimport ControlView from \"./ControlView\";\nimport UnitView from \"./UnitView\";\nimport DetailView from \"./DetailView\";\n\nconst ManagePage = () => {\n  const store = useGlobalStore();\n  useEffect(() => {\n    store.setCurrentPage();\n    store.initPapers();\n    store.initUserId();\n  }, []);\n  return (\n    <div className=\"main-container\">\n      <div className=\"control-main-container\">\n        <div className=\"control-view-container\">\n          <ControlView />\n        </div>\n        <div className=\"unit-view-container\">\n          <UnitView />\n        </div>\n      </div>\n      <div className=\"detail-view-container\">\n        <DetailView />\n      </div>\n    </div>\n  );\n};\n\nexport default ManagePage;\n",["178","179"],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/index.js",["180"],"import React, { useEffect } from \"react\";\nimport { useGlobalStore } from \"Store\";\nimport \"./index.scss\";\n// import TagView from \"./TagView\";\n// import TagView from \"./TagView-Hor\";\nimport ProjectView from \"./ProjectView-New\";\nimport NetworkView from \"./NetworkView-New\";\n// import TopicView from \"./TopicView\";\nimport TopicView from \"./TopicView-New\";\n// import HighlightListView from \"./HighlightListView\";\n// import DetailView from \"./DetailView\";\nimport StatisticsView from \"./StatisticsView\";\nimport PapersTable from \"./PapersTable\";\nimport HoverTooltip from \"./HoverTooltip\";\n\nconst AnalysisPage = () => {\n  const store = useGlobalStore();\n  useEffect(() => {\n    store.setCurrentPage();\n    store.initPapers();\n    store.initUserId();\n  }, []);\n  return (\n    <div className=\"analysis-container\">\n      <HoverTooltip />\n      <div className=\"left-container\">\n        {/* <TagView /> */}\n        <StatisticsView />\n      </div>\n      <div className=\"middle-container\">\n        <div className=\"middle-top-container\">\n          <ProjectView />\n        </div>\n        <div className=\"middle-bottom-container\">\n          <NetworkView />\n        </div>\n      </div>\n      <div className=\"right-container\">\n        <div className=\"right-top-container\">\n          <TopicView />\n        </div>\n        {/* <div className=\"right-middle-container\">\n          <HighlightListView />\n        </div>\n        <div className=\"right-bottom-container\">\n          <DetailView /> \n        </div> */}\n        <div className=\"right-middle-bottom-container\">\n          <PapersTable />\n        </div>\n      </div>\n      <HoverTooltip />\n    </div>\n  );\n};\n\nexport default AnalysisPage;\n",["181","182"],"/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/UnitView/index.js",[],"/home/mintian/pku/vis/paper_management_system/src/Common/mostCommon.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/TagView/index.js",[],"/home/mintian/pku/vis/paper_management_system/src/Common/svgPadding.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/HighlightListView/index.js",[],["183","184"],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/DetailView/index.js",[],"/home/mintian/pku/vis/paper_management_system/src/Server/index.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/DetailView/index.js",["185","186","187"],"import React, { useState, useRef, useEffect } from \"react\";\nimport \"./index.scss\";\nimport { useGlobalStore } from \"Store\";\nimport { observer } from \"mobx-react-lite\";\nimport { get } from \"lodash\";\nimport { Switch, Modal, Tag, Input } from \"antd\";\nimport {\n  CloseOutlined,\n  CheckOutlined,\n  PlusOutlined,\n  SettingOutlined,\n} from \"@ant-design/icons\";\nimport { toJS } from \"mobx\";\n\nconst debug = true;\n\nconst keys = [\n  \"title\",\n  \"doi\",\n  \"year\",\n  \"conferenceName\",\n  \"authors\",\n  \"citationCount\",\n  \"affiliation\",\n  \"countries\",\n  \"abstract\",\n  \"keywords\",\n  \"refList\",\n];\nconst DetailView = observer(() => {\n  const store = useGlobalStore();\n  const { currentSelectedPaper, setPaper, updatePaper } = store;\n  const paper = currentSelectedPaper;\n  const [uploadModalShow, _setUploadModalShow] = useState(false);\n  const [newPaper, setNewPaper] = useState({});\n  const setUploadModalShow = () => {\n    if (!uploadModalShow) {\n      const _newPaper = {};\n      keys.forEach(\n        (key) =>\n          (_newPaper[key] = Array.isArray(currentSelectedPaper[key])\n            ? currentSelectedPaper[key].join(\"; \")\n            : currentSelectedPaper[key])\n      );\n      setNewPaper(_newPaper);\n    }\n    _setUploadModalShow(!uploadModalShow);\n  };\n\n  if (!currentSelectedPaper) {\n    return <div></div>;\n  }\n\n  const doi = get(paper, \"doi\", \"\");\n\n  const editTags = [\n    {\n      title: \"Private Tags\",\n      value: \"privateTags\",\n      initTags: get(paper, \"privateTags\", []),\n    },\n    {\n      title: \"Public Tags\",\n      value: \"publicTags\",\n      initTags: get(paper, \"publicTags\", []),\n    },\n  ];\n  const handleChangeTags = (attr, value) => {\n    doi && setPaper(doi, attr, value);\n  };\n  const handleChangeRead = (value) => {\n    setPaper(doi, \"read\", value);\n  };\n\n  const handleSubmit = () => {\n    updatePaper(currentSelectedPaper.doi, newPaper);\n    setUploadModalShow();\n  };\n\n  return (\n    <div className=\"detail-view\" key={doi}>\n      {paper && (\n        <>\n          <div className=\"detail-header\">\n            <div className=\"detail-header-content\">\n              <div className=\"detail-title\">{paper.title}</div>\n              <div className=\"detail-authors\">\n                {get(paper, \"authors\", []).join(\"; \")} ({paper.year})\n              </div>\n            </div>\n            <div className=\"detail-header-icons\">\n              <SettingOutlined onClick={setUploadModalShow} />\n            </div>\n          </div>\n          <div className=\"detail-edit-tags\">\n            <div className=\"detail-edit-read\">\n              <div className=\"detail-edit-title\">Read</div>\n              <Switch\n                size=\"small\"\n                checkedChildren={<CheckOutlined />}\n                unCheckedChildren={<CloseOutlined />}\n                defaultChecked={get(paper, \"read\", false)}\n                onChange={handleChangeRead}\n              />\n            </div>\n            {editTags.map((editTag) => (\n              <DetailEditTags\n                key={editTag.value}\n                title={editTag.title}\n                initTags={editTag.initTags}\n                handleChangeTags={(value) =>\n                  handleChangeTags(editTag.value, value)\n                }\n              />\n            ))}\n          </div>\n          <div className=\"detail-attrs\">\n            <div className=\"detail-attr\">\n              <div className=\"detail-key\">keywords:</div>\n              <div className=\"detail-content\">\n                {get(paper, \"keywords\", []).join(\"; \")}\n              </div>\n            </div>\n            <DetailItem paper={paper} label={\"doi\"} />\n            <DetailItem\n              paper={paper}\n              label={\"conference/journal\"}\n              value={\"conferenceName\"}\n            />\n            <DetailItem paper={paper} label={\"affiliation\"} />\n            <DetailItem paper={paper} label={\"abstract\"} />\n          </div>\n          <Modal\n            key={currentSelectedPaper.doi}\n            title=\"Upload\"\n            visible={uploadModalShow}\n            onOk={handleSubmit}\n            onCancel={setUploadModalShow}\n            centered\n          >\n            {keys.map((key) => (\n              <div className=\"detail-new-paper-item\" key={key}>\n                <div className=\"detail-new-paper-label\">{key}</div>\n                <div className=\"detail-new-paper-input\">\n                  <Input\n                    value={newPaper[key]}\n                    onChange={(e) => {\n                      const new_paper = { ...newPaper };\n                      new_paper[key] = e.target.value;\n                      setNewPaper(new_paper);\n                    }}\n                  />\n                </div>\n              </div>\n            ))}\n          </Modal>\n        </>\n      )}\n    </div>\n  );\n});\n\nexport default DetailView;\n\nconst DetailItem = ({ paper, label, value = \"\" }) => {\n  if (value.length === 0) value = label;\n  return (\n    <div className=\"detail-attr\">\n      <div className=\"detail-key\">{label}:</div>\n      <div className=\"detail-content\">{get(paper, value, \"\")}</div>\n    </div>\n  );\n};\n\nconst DetailEditTags = ({ title, initTags, handleChangeTags }) => {\n  const [tags, _setTags] = useState(initTags);\n  const setTags = (newTags) => {\n    handleChangeTags(newTags);\n    _setTags(newTags);\n  };\n  const [editInputIndex, setEditInputIndex] = useState(-1);\n  // const [editInput, setEditInput] = useState();\n  // const saveEditInputRef = (input) => setEditInput(input);\n  const input = useRef();\n  // const saveInputRef = (input) => setInput(input);\n\n  const [editInputValue, setEditInputValue] = useState(\"\");\n  const handleEditInputConfirm = () => {\n    const newTags = [...tags];\n    newTags[editInputIndex] = editInputValue;\n    setTags(newTags);\n    setEditInputIndex(-1);\n    setEditInputValue(\"\");\n  };\n\n  const [inputValue, setInputValue] = useState(\"\");\n  const handleInputConfirm = () => {\n    if (inputValue && tags.indexOf(inputValue) < 0) {\n      setTags([...tags, inputValue]);\n      setInputVisible(false);\n      setInputValue(\"\");\n    }\n  };\n\n  const handleClose = (removeTag) => {\n    setTags(tags.filter((tag) => tag !== removeTag));\n  };\n\n  const [inputVisible, setInputVisible] = useState(false);\n  const showInput = () => {\n    setInputVisible(true);\n    // input.focus();\n  };\n  return (\n    <div className=\"detail-edit-tag\">\n      <div className=\"detail-edit-title\">{title}:</div>\n      <div className=\"detail-edit-tags\">\n        <>\n          {tags.map((tag, index) => {\n            if (editInputIndex === index) {\n              return (\n                <Input\n                  // ref={saveEditInputRef}\n                  key={tag}\n                  size=\"small\"\n                  className=\"tag-input\"\n                  value={editInputValue}\n                  onchange={(e) => setEditInputValue(e.target.value)}\n                  onBlur={handleEditInputConfirm}\n                  onPressEnter={handleEditInputConfirm}\n                />\n              );\n            }\n\n            const tagElem = (\n              <Tag\n                className=\"edit-tag\"\n                key={tag}\n                closable={true}\n                onClose={() => handleClose(tag)}\n              >\n                <span\n                // onDoubleClick={(e) => {\n                //   setEditInputIndex(index);\n                //   setEditInputValue(tag);\n                //   editInput.focus();\n                //   e.preventDefault();\n                // }}\n                >\n                  {tag}\n                </span>\n              </Tag>\n            );\n            return tagElem;\n          })}\n          {inputVisible && (\n            <Input\n              ref={input}\n              type=\"text\"\n              size=\"small\"\n              className=\"tag-input\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              onBlur={handleInputConfirm}\n              onPressEnter={handleInputConfirm}\n            />\n          )}\n          {!inputVisible && (\n            <Tag className=\"site-tag-plus\" onClick={showInput}>\n              <PlusOutlined /> New Tag\n            </Tag>\n          )}\n        </>\n      </div>\n    </div>\n  );\n};\n",["188","189"],"/home/mintian/pku/vis/paper_management_system/src/Store/index.js",[],["190","191"],"/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/ControlView/index.js",["192"],"import React, { useState, useEffect } from \"react\";\nimport \"./index.scss\";\nimport { useGlobalStore } from \"Store\";\nimport { observer } from \"mobx-react-lite\";\n// import { toJS } from \"mobx\";\nimport SearchView from \"../SearchView\";\n\nconst ControlView = observer(() => {\n  const store = useGlobalStore();\n  const { controlTagNameList } = store;\n  return (\n    <div className=\"control-view\">\n      <div className=\"control-item\">\n        <div className=\"control-item-title\">Title Search</div>\n        <div className=\"control-item-search-input\">\n          <SearchView searchAttr={\"title\"} />\n        </div>\n      </div>\n\n      {controlTagNameList.map((tag) => (\n        <ControlItem key={tag.label} tagData={tag} />\n      ))}\n    </div>\n  );\n});\n\nexport default ControlView;\n\nconst ControlItem = observer(({ tagData }) => {\n  const store = useGlobalStore();\n  const { tag2color, papers } = store;\n  const [tags, setTags] = useState([]);\n  // 又是一个外挂逻辑，从ana界面切回来以后，需要初始化tag item，理论上这个应该放在store统一处理\n  useEffect(() => {\n    const initTags = Object.keys(tag2color)\n      .filter((tag) => tag.split(\"---\")[0] === tagData.value)\n      .map((tag) => tag.split(\"---\")[1])\n      .filter((tag) => tagData.list.indexOf(tag) > -1);\n    setTags(initTags);\n  }, []);\n  const handleClickOption = (value) => {\n    const currentTags = [...tags];\n    const index = currentTags.indexOf(value);\n    if (index > -1) {\n      currentTags.splice(index, 1);\n      setTags(currentTags);\n    } else {\n      currentTags.push(value);\n      setTags(currentTags);\n    }\n    store.setTagColor(value, tagData.value);\n  };\n\n  return (\n    <div className=\"control-item\">\n      <div className=\"control-item-title\">{tagData.label}</div>\n      <div className=\"control-item-options\">\n        {tagData.list.map((item) => (\n          <ControlOption\n            key={item}\n            value={item}\n            clickOption={handleClickOption}\n            isSelect={\n              tags.indexOf(item) > -1 && tag2color[`${tagData.value}---${item}`]\n            }\n            count={\n              tags.indexOf(item) > -1\n                ? papers.filter((paper) => paper[tagData.value].includes(item))\n                    .length\n                : 0\n            }\n          />\n        ))}\n      </div>\n    </div>\n  );\n});\n\nconst ControlOption = ({ value, clickOption, isSelect, count = 0 }) => {\n  const className = [\"control-item-option\", isSelect && \"option-active\"]\n    .filter((a) => a)\n    .join(\" \");\n  const style = isSelect\n    ? { background: isSelect, border: `1px solid ${isSelect}` }\n    : {};\n  const value_format = value === \"Usa\" ? \"USA\" : value;\n  return (\n    <div className={className} onClick={() => clickOption(value)} style={style}>\n      {value_format} {isSelect && `(${count})`}\n    </div>\n  );\n};\n","/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/TagView-Hor/index.js",[],["193","194"],"/home/mintian/pku/vis/paper_management_system/src/Components/TimeLine/index.js",["195","196","197","198","199"],"/home/mintian/pku/vis/paper_management_system/src/Hooks/index.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/TagView-Hor/TagFilter/index.js",["200","201","202"],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/ProjectView/index.js",["203","204","205","206"],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/TopicView/index.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/NetworkView/index.js",["207","208"],"/home/mintian/pku/vis/paper_management_system/src/Common/find_d.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/ProjectView-New/index.js",["209","210","211","212"],"import React, { useState, useEffect } from \"react\";\nimport \"./index.scss\";\nimport { observer } from \"mobx-react-lite\";\nimport { useGlobalStore } from \"Store\";\nimport { useClientRect } from \"Hooks\";\nimport * as d3 from \"d3\";\nimport { Slider } from \"antd\";\nimport { find_d } from \"Common\";\nimport { get } from \"lodash\";\n\nconst ProjectionView = observer(() => {\n  const svgId = \"ana-projection-map-svg\";\n  const store = useGlobalStore();\n  const {\n    drawProjectionFlag,\n    analysisPapers,\n    anaHighPapers,\n    num_topics,\n    resetProjectionFlag,\n    setNumTopics,\n    defaultHighColor,\n    topicColorScale,\n    anaFilterType,\n    anaHighTopic,\n    setAnaSelectHighlightPaperDoi,\n    anaSelectHighlightPaperDoi,\n    setHighEntityLinkData,\n    anaHighEntityTopic,\n    setAnaHighEntityTopic,\n    setAnaHoverPaperDoi,\n    removeHoverPaperDoi,\n    anaHoverPaperDoi,\n  } = store;\n  const [num_topics_ing, set_num_topics_ing] = useState(num_topics);\n\n  const clientRect = useClientRect({\n    svgId,\n  });\n  const { width, height } = clientRect;\n  useEffect(() => {\n    store.tryLda();\n  }, []);\n\n  const padding = {\n    left: 30,\n    right: 30,\n    top: 30,\n    bottom: 30,\n  };\n  const x = d3\n    .scaleLinear()\n    .domain([\n      d3.min(analysisPapers, (d) => d.projection[0]),\n      d3.max(analysisPapers, (d) => d.projection[0]),\n    ])\n    .nice()\n    .range([padding.left, width - padding.right]);\n  const y = d3\n    .scaleLinear()\n    .domain([\n      d3.min(analysisPapers, (d) => d.projection[1]),\n      d3.max(analysisPapers, (d) => d.projection[1]),\n    ])\n    .nice()\n    .range([height - padding.bottom, padding.top]);\n\n  // contour相关\n  const contours = d3.range(num_topics).map(\n    (topic_i) =>\n      d3\n        .contourDensity()\n        .x((d) => x(d.projection[0]))\n        .y((d) => y(d.projection[1]))\n        .size([width, height])\n        .bandwidth(30)\n        .thresholds(35)(\n        analysisPapers.filter((paper) =>\n          paper.topics.map((topic) => topic[0]).includes(topic_i)\n        )\n      )[topic_i % 5]\n  );\n  const contourOpacity = (topicIndex) => {\n    // return 1\n    if (anaFilterType === \"none\") return 0.25;\n    else if (anaFilterType !== \"topic\") return 0.1;\n    else return topicIndex === anaHighTopic ? 0.36 : 0.1;\n  };\n\n  // paperCircle相关\n  const paperCircleR = d3\n    .scaleLinear()\n    .domain([0, d3.max(analysisPapers, (d) => +d.citationCount)])\n    .range([3, 15]);\n\n  const paperCircleColor = (paper) => {\n    if (paper.topics.length === 0) {\n      return \"#ccc\";\n    } else {\n      let mainTopic = paper.topics[0];\n      paper.topics.forEach((topic) => {\n        if (topic[1] > mainTopic[1]) {\n          mainTopic = topic;\n        }\n      });\n      return topicColorScale[mainTopic[0]];\n    }\n  };\n  const paperCircleOpacity = (paper) => {\n    if (anaSelectHighlightPaperDoi === paper.doi) return 1;\n    if (anaFilterType === \"none\") return 1;\n    return anaHighPapers.map((paper) => paper.doi).includes(paper.doi)\n      ? 0.8\n      : 0.2;\n  };\n  const paperCircleStrokeWidth = (paper) => {\n    if (anaSelectHighlightPaperDoi === paper.doi) return 6;\n    if (anaFilterType === \"none\") return 1;\n    if (anaFilterType === \"topic\") return 1;\n    return anaHighPapers.map((paper) => paper.doi).includes(paper.doi) ? 3 : 1;\n  };\n  const paperCircleDasharray = (paper) => {\n    if (anaSelectHighlightPaperDoi === paper.doi) return [4, 8];\n    if (anaFilterType === \"none\" || anaFilterType === \"topic\") return \"none\";\n    return anaHighPapers.map((paper) => paper.doi).includes(paper.doi)\n      ? [5, 5]\n      : \"none\";\n  };\n  const paperCircleStroke = (paper) => {\n    if (anaSelectHighlightPaperDoi === paper.doi) return \"red\";\n    if (anaFilterType === \"none\" || anaFilterType === \"topic\") return \"#fff\";\n    else\n      return anaHighPapers.map((paper) => paper.doi).includes(paper.doi)\n        ? \"#333\"\n        : \"none\";\n  };\n\n  // 主题Entity相关\n  const generateEntity = (topicIndex) => {\n    const allPapers = analysisPapers.filter((paper) =>\n      paper.topics.map((a) => a[0]).includes(topicIndex)\n    );\n    const mainPapers = analysisPapers.filter(\n      (paper) => paper.topics[0][0] === topicIndex\n    );\n    const positionX = x(\n      mainPapers.reduce((s, a) => s + a.projection[0], 0) / mainPapers.length\n    );\n    const positionY = y(\n      mainPapers.reduce((s, a) => s + a.projection[1], 0) / mainPapers.length\n    );\n    return {\n      allPapers,\n      topicIndex,\n      mainPapers,\n      positionX,\n      positionY,\n      color: topicColorScale[topicIndex],\n    };\n  };\n  const anaHighTopicEntity = generateEntity(anaHighTopic);\n  const anaHighTopicPaperDoiSet = new Set(\n    anaHighTopicEntity.allPapers.map((paper) => paper.doi)\n  );\n  const anaOtherEntities = d3\n    .range(num_topics)\n    .filter((a) => a !== anaHighTopic)\n    .map((topicIndex) => generateEntity(topicIndex));\n  anaOtherEntities.forEach((entity) => {\n    entity.intersectionPapers = entity.allPapers.filter((paper) =>\n      anaHighTopicPaperDoiSet.has(paper.doi)\n    );\n  });\n  const entityR = d3\n    .scaleLinear()\n    .domain(\n      d3.extent(\n        [...anaOtherEntities, anaHighTopicEntity],\n        (d) => d.allPapers.length\n      )\n    )\n    .range([30, 45]);\n  const getEntitySectorD = (entity) => {\n    const angle =\n      (2 * Math.PI * entity.intersectionPapers.length) /\n      entity.allPapers.length;\n    const r = entityR(entity.allPapers.length);\n    const start = {\n      x: entity.positionX,\n      y: entity.positionY - r,\n    };\n    const end = {\n      x: entity.positionX + Math.sin(angle) * r,\n      y: entity.positionY - Math.cos(angle) * r,\n    };\n    return `M ${entity.positionX} ${entity.positionY}\n          L ${start.x} ${start.y}\n          A ${r} ${r} 0 0 1 ${end.x} ${end.y}\n          Z\n          `;\n  };\n  const entityOpacity = (entity) => {\n    if (anaHighEntityTopic < 0) return 0.8;\n    else return entity.topicIndex === anaHighEntityTopic ? 1 : 0.6;\n  };\n\n  // 主题间Link相关\n  const topicLinks = anaOtherEntities.map((entity) => {\n    const topicIndex = entity.topicIndex;\n    const source = {\n      x: entity.positionX,\n      y: entity.positionY,\n    };\n    const target = {\n      x: anaHighTopicEntity.positionX,\n      y: anaHighTopicEntity.positionY,\n    };\n\n    const res = find_d(source.x, source.y, target.x, target.y, 25);\n    const citeControlPoints = [\n      {\n        x: res.x_1_3_negative,\n        y: res.y_1_3_negative,\n      },\n      {\n        x: res.x_2_3_negative,\n        y: res.y_2_3_negative,\n      },\n    ];\n    const citedControlPoints = [\n      {\n        x: res.x_1_3_positive,\n        y: res.y_1_3_positive,\n      },\n      {\n        x: res.x_2_3_positive,\n        y: res.y_2_3_positive,\n      },\n    ];\n    const interPapers = entity.allPapers.filter((paper) =>\n      anaHighTopicPaperDoiSet.has(paper.doi)\n    );\n    const interCount = interPapers.length;\n    const interPapersDoiSet = new Set(interPapers.map((paper) => paper.doi));\n    const independentPapers = entity.allPapers.filter(\n      (paper) => !interPapersDoiSet.has(paper.doi)\n    );\n    const centralEntityIndependentPapers = anaHighTopicEntity.allPapers.filter(\n      (paper) => !interPapersDoiSet.has(paper.doi)\n    );\n\n    const citeDoiSet = new Set(\n      independentPapers.reduce((s, a) => s.concat(a.refList), [])\n    );\n    const citePapers = centralEntityIndependentPapers.filter((paper) =>\n      citeDoiSet.has(paper.doi)\n    );\n    const citePapersDoiSet = new Set(citePapers.map((paper) => paper.doi));\n    const citeLinkCount = independentPapers.reduce(\n      (s, paper) =>\n        s + paper.refList.filter((doi) => citePapersDoiSet.has(doi)).length,\n      0\n    );\n    const citePaperCount = citePapers.length;\n\n    const citeSourcePapers = independentPapers.filter(\n      (paper) =>\n        paper.refList.filter((doi) => citePapersDoiSet.has(doi)).length > 0\n    );\n\n    const citedDoiSet = new Set(\n      centralEntityIndependentPapers.reduce((s, a) => s.concat(a.refList), [])\n    );\n    const citedPapers = independentPapers.filter((paper) =>\n      citedDoiSet.has(paper.doi)\n    );\n    const citedPapersDoiSet = new Set(citedPapers.map((paper) => paper.doi));\n    const citedLinkCount = centralEntityIndependentPapers.reduce(\n      (s, paper) =>\n        s + paper.refList.filter((doi) => citedPapersDoiSet.has(doi)).length,\n      0\n    );\n    const citedPaperCount = citedPapers.length;\n\n    return {\n      topicIndex,\n      source,\n      target,\n      citeControlPoints,\n      citedControlPoints,\n      independentPapers,\n      interPapers,\n      centralEntityIndependentPapers,\n      citeDoiSet,\n      citedDoiSet,\n      interCount,\n      citePapers,\n      citePaperCount,\n      citeLinkCount,\n      citedPapers,\n      citedPaperCount,\n      citedLinkCount,\n\n      citeSourcePapers,\n      citePapersDoiSet,\n    };\n  });\n  const _linkWidth = d3\n    .scaleLinear()\n    .domain([\n      0,\n      d3.max(topicLinks, (d) =>\n        d3.max([d.interCount, d.citeLinkCount, d.citedLinkCount])\n      ),\n    ])\n    .range([5, 20]);\n  const linkWidth = (weight) => (weight === 0 ? 0 : _linkWidth(weight));\n  const topicLinkOpacity = (topicLink) => {\n    if (anaHighEntityTopic < 0) return 0.7;\n    else return topicLink.topicIndex === anaHighEntityTopic ? 1 : 0.3;\n  };\n  const handleClickLinks = (link) => {\n    setAnaHighEntityTopic(link.topicIndex);\n    setHighEntityLinkData(\n      link.citeSourcePapers.map((paper) => paper.doi),\n      link.citedPapers.map((paper) => paper.doi),\n      link.centralEntityIndependentPapers.map((paper) => paper.doi)\n    );\n  };\n\n  // const mostCitedPapers = d3\n  //   .sort([...anaHighPapers], (p) => +p.citationCount)\n  //   .slice(anaFilterType === \"topic\" ? -3 : -8);\n  // const mostCitedPaperDoiSet = new Set(\n  //   mostCitedPapers.map((paper) => paper.doi)\n  // );\n  const papersSortByCite = d3\n    .sort([...anaHighPapers], (p) => +p.citationCount)\n    .reverse();\n  const mostCitedPapers = [];\n  const countLimit = 16;\n  const xDis = 200;\n  const yDis = 30;\n  const isCover = (p1, p2) =>\n    Math.abs(x(p1.projection[0]) - x(p2.projection[0])) < xDis &&\n    Math.abs(y(p1.projection[1]) - y(p2.projection[1])) < yDis;\n  const isShow = (paper) =>\n    mostCitedPapers.find((p) => isCover(paper, p)) ? false : true;\n  papersSortByCite.forEach((paper) => {\n    if (mostCitedPapers.length < countLimit) {\n      if (isShow(paper)) {\n        mostCitedPapers.push(paper);\n      }\n    }\n  });\n  const mostCitedPaperDoiSet = new Set(\n    mostCitedPapers.map((paper) => paper.doi)\n  );\n  const labelFontS = d3\n    .scaleLinear()\n    .domain(d3.extent(mostCitedPapers, (p) => +p.citationCount))\n    .range([16, 22])\n    .clamp(true);\n\n  const abbr = (paper) => {\n    const author = get(paper, \"authors[0]\", \"\").split(\" \").slice(-1);\n    const conference = get(paper, \"conferenceName\", \"\");\n    const year = `${get(paper, \"year\", \"\")}`.slice(-2);\n    return mostCitedPaperDoiSet.has(paper.doi) ||\n      anaSelectHighlightPaperDoi === paper.doi || anaHoverPaperDoi === paper.doi\n      ? `[${author}. ${conference}${year}]`\n      : \"\";\n  };\n\n  const handleHover = (e, doi) => {\n    const { clientX, clientY } = e;\n    setAnaHoverPaperDoi(clientX, clientY, doi);\n  };\n\n  return (\n    <div className=\"projection-view\">\n      <svg id={svgId} width=\"100%\" height=\"100%\">\n        <g id=\"topic-contours-g\" strokeLinejoin=\"round\" strokeWidth=\"1.5\">\n          {contours.map((contour, topicIndex) => (\n            <>\n              <path\n                key={topicIndex}\n                d={d3.geoPath()(contour)}\n                fill={topicColorScale[topicIndex]}\n                opacity={contourOpacity(topicIndex)}\n                stroke={\n                  topicIndex === anaHighTopic\n                    ? \"#111\"\n                    : topicColorScale[topicIndex]\n                }\n                strokeDasharray={topicIndex === anaHighTopic ? 5 : \"none\"}\n              />\n              <path\n                key={`${topicIndex}-border`}\n                d={d3.geoPath()(contour)}\n                fill={\"none\"}\n                opacity={1}\n                stroke={topicColorScale[topicIndex]}\n                strokeDasharray={5}\n              />\n            </>\n          ))}\n        </g>\n        <g id=\"paper-circles-g\" stroke=\"#fff\">\n          {analysisPapers.map((paper) => (\n            <g\n              key={paper.doi}\n              transform={`translate(${x(paper.projection[0])}, ${y(\n                paper.projection[1]\n              )})`}\n            >\n              <circle\n                r={\n                  paperCircleR(+paper.citationCount) +\n                  paperCircleStrokeWidth(paper)\n                }\n                fill={paperCircleColor(paper)}\n                strokeLinecap=\"round\"\n                strokeWidth={paperCircleStrokeWidth(paper)}\n                opacity={paperCircleOpacity(paper)}\n                strokeDasharray={paperCircleDasharray(paper)}\n                stroke={paperCircleStroke(paper)}\n                cursor=\"pointer\"\n                onClick={() => setAnaSelectHighlightPaperDoi(paper.doi)}\n                onMouseEnter={(e) => handleHover(e, paper.doi)}\n                onMouseLeave={removeHoverPaperDoi}\n              />\n            </g>\n          ))}\n        </g>\n        {anaFilterType === \"topic\" && (\n          <>\n            <g id=\"topic-links-g\" strokeLinecap=\"round\">\n              {topicLinks.map((topicLink) => (\n                <g\n                  key={topicLink.topicIndex}\n                  fill=\"none\"\n                  opacity={topicLinkOpacity(topicLink)}\n                  cursor=\"pointer\"\n                  onClick={() => handleClickLinks(topicLink)}\n                >\n                  <path\n                    className=\"cited\"\n                    stroke={topicColorScale[topicLink.topicIndex]}\n                    strokeWidth={linkWidth(topicLink.citedLinkCount)}\n                    d={`M${topicLink.source.x},${topicLink.source.y} \n                    C${topicLink.citedControlPoints[0].x},${topicLink.citedControlPoints[0].y}, \n                    ${topicLink.citedControlPoints[1].x},${topicLink.citedControlPoints[1].y}, \n                    ${topicLink.target.x},${topicLink.target.y}`}\n                  />\n                  <path\n                    className=\"cite\"\n                    stroke={topicColorScale[anaHighTopic]}\n                    strokeWidth={linkWidth(topicLink.citeLinkCount)}\n                    d={`M${topicLink.target.x},${topicLink.target.y}\n                    C${topicLink.citeControlPoints[1].x},${topicLink.citeControlPoints[1].y}, \n                    ${topicLink.citeControlPoints[0].x},${topicLink.citeControlPoints[0].y}, \n                    ${topicLink.source.x},${topicLink.source.y}`}\n                  />\n                </g>\n              ))}\n            </g>\n            <g id=\"topic-entities-g\">\n              <g id=\"selected-topic-entity-g\"></g>\n              <g id=\"others-topic-entities-g\" stroke=\"#fff\" strokeWidth=\"3\">\n                {anaOtherEntities.map((entity) => (\n                  <g key={entity.topicIndex} opacity={entityOpacity(entity)}>\n                    <circle\n                      cx={entity.positionX}\n                      cy={entity.positionY}\n                      r={entityR(entity.allPapers.length)}\n                      fill={entity.color}\n                    />\n                    <path\n                      fill={topicColorScale[anaHighTopic]}\n                      d={getEntitySectorD(entity)}\n                    />\n                  </g>\n                ))}\n              </g>\n            </g>\n          </>\n        )}\n        <g id=\"paper-circles-lables-g\" stroke=\"#fff\">\n          {analysisPapers.map((paper) => (\n            <g\n              key={paper.doi}\n              transform={`translate(${x(paper.projection[0])}, ${y(\n                paper.projection[1]\n              )})`}\n            >\n              <text\n                fontSize={labelFontS(+paper.citationCount)}\n                fill=\"#333\"\n                stroke=\"none\"\n                textAnchor=\"middle\"\n                y=\"-10\"\n                opacity={0.9}\n                pointerEvents=\"none\"\n              >\n                {abbr(paper)}\n              </text>\n            </g>\n          ))}\n        </g>\n      </svg>\n      <div className=\"topics-number-input\">\n        <div className=\"topics-number-input-text\">\n          Topics Num: {num_topics_ing}\n        </div>\n        <Slider\n          min={2}\n          max={10}\n          onAfterChange={setNumTopics}\n          onChange={set_num_topics_ing}\n          value={num_topics_ing}\n        />\n      </div>\n    </div>\n  );\n});\n\nexport default ProjectionView;\n",["213","214"],"/home/mintian/pku/vis/paper_management_system/src/Common/userList.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/ManagePage/UnitView/CircleUnit.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/NetworkView-New/index.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/StatisticsView/index.js",["215","216","217","218","219","220","221","222","223","224"],"import React, { useState, useEffect } from \"react\";\nimport \"./index.scss\";\nimport { observer } from \"mobx-react-lite\";\nimport { useGlobalStore } from \"Store\";\nimport { useClientRect } from \"Hooks\";\nimport * as d3 from \"d3\";\nimport { get } from \"mobx\";\n// import { UserOutlined } from \"@ant-design/icons\";\n\nconst fontL = 0.022;\nconst fontM = 0.02;\nconst fontS = 0.015;\n\nconst ratio = (r) => `${r * 100}%`;\n\nconst headerRatio = 0.045;\nconst timeDistributionRatio = 0.1;\n\nconst heatmapTitleRatio = 0.03;\nconst heatmapRowRatio = 0.024;\nconst heatmapRowLabelWidthRatio = 0.24;\nconst heatmapRowRectsLeftPaddingRatio = 0.05;\nconst heatmapRowRectsRightPaddingRatio = 0.03;\nconst heatmapRowRectsWidthRatio =\n  1 -\n  heatmapRowLabelWidthRatio -\n  heatmapRowRectsLeftPaddingRatio -\n  heatmapRowRectsRightPaddingRatio;\nconst heatmapRectHeightRatio = 0.018;\nconst heatmapRectWidthRatio = 0.75;\nconst heatmapBottomRatio = 0.01;\nconst heatmapColors = [\"#c6dbef\", \"#9ecae1\", \"#6baed6\", \"#3182bd\", \"#08519c\"];\n\nconst authorCount = 10;\nconst keywordsCount = 10;\n\nconst StatisticsView = observer(() => {\n  const svgId = \"statistics-view-svg\";\n  const clientRect = useClientRect({\n    svgId,\n  });\n  const { width, height } = clientRect;\n\n  const headerStyle = { transform: `translateY(${ratio(0)})` };\n  const timeDisStyle = { transform: `translateY(${ratio(headerRatio)})` };\n  const authorDisStyle = {\n    transform: `translateY(${ratio(headerRatio + timeDistributionRatio)})`,\n  };\n  const keywordDisStyle = {\n    transform: `translateY(${ratio(\n      headerRatio +\n        timeDistributionRatio +\n        (heatmapTitleRatio + heatmapRowRatio * authorCount + heatmapBottomRatio)\n    )})`,\n  };\n  const topicDisStyle = {\n    transform: `translateY(${ratio(\n      headerRatio +\n        timeDistributionRatio +\n        (heatmapTitleRatio +\n          heatmapRowRatio * authorCount +\n          heatmapBottomRatio) +\n        (heatmapTitleRatio +\n          heatmapRowRatio * keywordsCount +\n          heatmapBottomRatio)\n    )})`,\n  };\n\n  const store = useGlobalStore();\n  const {\n    analysisPapers,\n    anaHighPapers,\n    anaTagViewData,\n    anaYearRange,\n    num_topics,\n    topicColorScale,\n    anaFilterType,\n    anaHighTag,\n    anaHighTopic,\n    setAnaFilterType,\n    setAnaHighPapersByYear,\n    setAnaHighPapersByTag,\n    setAnaHighPapersByTopic,\n    startYear,\n    endYear,\n    setClearBrushTrigger,\n    clearBrushTrigger,\n  } = store;\n  // console.log(\"analysisPapers\", analysisPsapers);\n\n  const authorData = anaTagViewData\n    .find((d) => d.value === \"authors\")\n    .data.slice(0, authorCount);\n\n  const keywordData = anaTagViewData\n    .find((d) => d.value === \"keywords\")\n    .data.slice(0, keywordsCount);\n\n  const topicData = d3.range(0, num_topics).map((topic_index) => {\n    const papers = analysisPapers.filter((paper) =>\n      paper.topics.map((a) => a[0]).includes(topic_index)\n    );\n    const highlightPapers = anaHighPapers.filter((paper) =>\n      paper.topics.map((a) => a[0]).includes(topic_index)\n    );\n    return {\n      label: `topic ${topic_index + 1}`,\n      allCount: papers.length,\n      highlightCount: highlightPapers.length,\n      allDis: anaYearRange.map(\n        (year) => papers.filter((paper) => paper.year == year).length\n      ),\n      highLightDis: anaYearRange.map(\n        (year) => highlightPapers.filter((paper) => paper.year == year).length\n      ),\n      color: topicColorScale[topic_index],\n    };\n  });\n  // console.log(\"topicData\", topicData);\n  const allDisData = anaYearRange.map((year) => ({\n    year,\n    all: analysisPapers.filter((paper) => paper.year == year).length,\n    highlight: anaHighPapers.filter((paper) => paper.year == year).length,\n  }));\n\n  // brush\n\n  const brushStart = () => {\n    setAnaFilterType(\"year\");\n  };\n\n  const brushing = ({ selection }) => {\n    const x2year = (x) =>\n      (x / (width * heatmapRowRectsWidthRatio)) * anaYearRange.length;\n    const start = Math.floor(x2year(selection[0]));\n    const selectStartYear = anaYearRange[start > 0 ? start : 0];\n    const end = Math.floor(x2year(selection[1]));\n    const selectEndYear =\n      anaYearRange[\n        end < anaYearRange.length - 1 ? end : anaYearRange.length - 1\n      ];\n    (startYear !== selectStartYear || endYear !== selectEndYear) &&\n      setAnaHighPapersByYear([selectStartYear, selectEndYear]);\n  };\n\n  const brushEnd = (something) => {\n    if (something && something.selection) {\n    } else {\n      setAnaFilterType(\"none\");\n      setAnaHighPapersByYear([\n        anaYearRange[0],\n        anaYearRange[anaYearRange.length - 1],\n      ]);\n    }\n  };\n\n  const handleClickAuthor = (author) => {\n    setAnaHighPapersByTag({ anaHighCate: \"authors\", anaHighTag: author });\n  };\n\n  const handleClickTag = (keyword) => {\n    setAnaHighPapersByTag({ anaHighCate: \"keywords\", anaHighTag: keyword });\n  };\n\n  const handleClickTopic = (topic) => {\n    setAnaHighPapersByTopic(topic);\n  };\n\n  return (\n    <svg id={svgId} width=\"100%\" height=\"100%\">\n      <defs>\n        <linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop\n            offset=\"20%\"\n            style={{ \"stop-color\": \"#777\", \"stop-opacity\": 1 }}\n          />\n          <stop\n            offset=\"100%\"\n            style={{ \"stop-color\": \"#fff\", \"stop-opacity\": 1 }}\n          />\n        </linearGradient>\n      </defs>\n      <g id=\"header-g\" style={headerStyle}>\n        <StatisticsHeader\n          allCount={analysisPapers.length}\n          highlightCount={anaHighPapers.length}\n          anaFilterType={anaFilterType}\n          width={width}\n          height={height}\n        />\n      </g>\n      <g id=\"time-distribution-g\" style={timeDisStyle}>\n        <TimeLine\n          data={allDisData}\n          width={width}\n          height={height}\n          startYear={startYear}\n          endYear={endYear}\n          brushStart={brushStart}\n          brushing={brushing}\n          brushEnd={brushEnd}\n          setClearBrushTrigger={setClearBrushTrigger}\n        />\n      </g>\n      <g id=\"authors-distribution-g\" style={authorDisStyle}>\n        <HeatmapContent height={height} title={\"Author\"} width={width}>\n          <HeatMap\n            data={authorData}\n            width={width}\n            height={height}\n            handleClick={handleClickAuthor}\n            anaHighTag={anaHighTag}\n          />\n        </HeatmapContent>\n      </g>\n      <g id=\"keywords-distribution-g\" style={keywordDisStyle}>\n        <HeatmapContent height={height} title={\"Tag\"} width={width}>\n          <HeatMap\n            data={keywordData}\n            width={width}\n            height={height}\n            handleClick={handleClickTag}\n            anaHighTag={anaHighTag}\n          />\n        </HeatmapContent>\n      </g>\n      <g id=\"topics-distribution-g\" style={topicDisStyle}>\n        <HeatmapContent height={height} title={\"Topic\"} width={width}>\n          <TopicDistribution\n            data={topicData}\n            width={width}\n            height={height}\n            handleClick={handleClickTopic}\n            anaHighTag={anaHighTag}\n          />\n        </HeatmapContent>\n      </g>\n    </svg>\n  );\n});\n\nconst StatisticsHeader = ({\n  allCount = 0,\n  highlightCount = 0,\n  anaFilterType = \"none\",\n  width = 0,\n  height = 0,\n}) => {\n  return (\n    <>\n      <text\n        x={width * 0.04}\n        y={headerRatio * height * 0.55}\n        fontSize={fontL * height}\n        fontWeight=\"600\"\n        fill=\"#444\"\n      >\n        {/* Papers: {anaFilterType === 'none' || `${highlightCount}/`}{allCount} */}\n        All Papers: {allCount}\n      </text>\n      <path\n        d={`M${width * 0.02}, ${headerRatio * height * 0.8} H${width * 0.98}`}\n        stroke=\"#ccc\"\n        strokeWidth=\"1.5\"\n      />\n      <g\n        className=\"statistics-header-legend\"\n        transform={`translate(${width * 0.61}, ${headerRatio * height * 0.1})`}\n      >\n        {heatmapColors.map((color, i) => (\n          <rect\n            key={color}\n            x={(width * 0.3 * i) / 5}\n            y={height * headerRatio * 0.1}\n            width={(width * 0.3) / 5}\n            height={height * headerRatio * 0.4}\n            fill={color}\n          />\n        ))}\n        <text\n          x={-width * 0.02}\n          y={height * headerRatio * 0.45}\n          fontSize={fontS * height}\n          textAnchor=\"end\"\n          fill=\"#999\"\n        >\n          0\n        </text>\n        <text\n          x={width * 0.32}\n          y={height * headerRatio * 0.45}\n          fontSize={fontS * height}\n          fill=\"#999\"\n        >\n          &ge;5\n        </text>\n      </g>\n    </>\n  );\n};\n\nconst timeDisYearLeftRatio = heatmapRowLabelWidthRatio * 0.7;\n\nconst timeDisBarRatio = timeDistributionRatio * 0.75;\nconst timeDisLineRatio = timeDisBarRatio + 0.05 * timeDistributionRatio;\nconst timeDisStickRatio = timeDisLineRatio + 0.05 * timeDistributionRatio;\nconst timeDisStickTextRatio = timeDisStickRatio + fontS;\n\nconst TimeLine = ({\n  data = [],\n  width = 0,\n  height = 0,\n  startYear = 0,\n  endYear = 0,\n  brushStart = () => {},\n  brushing = () => {},\n  brushEnd = () => {},\n  setClearBrushTrigger = () => {},\n}) => {\n  const maxCount = d3.max(data, (d) => d.all);\n  const yearCount = data.length === 0 ? 1 : data.length;\n  const x = (i) => ((width * heatmapRowRectsWidthRatio) / yearCount) * i;\n  const y = (count) =>\n    (height * timeDisBarRatio * (maxCount - count)) / maxCount;\n  const barWidth = ((width * heatmapRowRectsWidthRatio) / yearCount) * 0.8;\n\n  const brush = d3\n    .brushX()\n    .extent([\n      [0, 0],\n      [heatmapRowRectsWidthRatio * width, timeDisBarRatio * height],\n    ])\n    .on(\"start\", brushStart)\n    .on(\"brush\", brushing)\n    .on(\"end\", brushEnd);\n  useEffect(() => {\n    const timeline = d3.select(\".time-line-bar-chart\");\n    timeline.call(brush);\n    setClearBrushTrigger(() => {\n      d3.brush().move(timeline);\n      // brushEnd();\n    });\n  }, [width]);\n\n  const yearTextX = timeDisYearLeftRatio * width;\n  const startYearTextY = timeDistributionRatio * height * 0.3;\n  const endYearTextY = timeDistributionRatio * height * 0.8;\n  const yearTextLinkY = startYearTextY + timeDistributionRatio * height * 0.1;\n  const yearTextLinkHeight = timeDistributionRatio * height * 0.14;\n\n  return (\n    <g className=\"time-line-container\">\n      <g\n        className=\"time-line-time\"\n        fontSize={fontL * height}\n        fontWeight=\"600\"\n        fill=\"#888\"\n      >\n        <text x={yearTextX} y={startYearTextY} textAnchor=\"middle\">\n          {startYear}\n        </text>\n        <text x={yearTextX} y={endYearTextY} textAnchor=\"middle\">\n          {endYear}\n        </text>\n        <path\n          d={`M${yearTextX}, ${yearTextLinkY} v${yearTextLinkHeight} `}\n          stroke=\"#999\"\n        />\n      </g>\n      <g\n        className=\"time-line-bar-chart\"\n        transform={`translate(${\n          width * (heatmapRowLabelWidthRatio + heatmapRowRectsLeftPaddingRatio)\n        }, 0)`}\n      >\n        <g className=\"time-line-bars-background\">\n          {data.map((d, i) => (\n            <rect\n              key={i}\n              x={x(i)}\n              y={y(d.all)}\n              fill=\"#ccc\"\n              width={barWidth}\n              height={y(0) - y(d.all)}\n            />\n          ))}\n        </g>\n        <g className=\"time-line-bars-highlight\">\n          {data.map((d, i) => (\n            <rect\n              key={i}\n              x={x(i)}\n              y={y(d.highlight)}\n              fill=\"#888\"\n              width={barWidth}\n              height={y(0) - y(d.highlight)}\n            />\n          ))}\n        </g>\n        <g className=\"time-line-axis\">\n          <path\n            d={`M${-barWidth * 0.5},${timeDisLineRatio * height}h${\n              width * heatmapRowRectsWidthRatio + barWidth\n            }`}\n            stroke=\"#aaa\"\n            strokeWidth=\"1\"\n          />\n          {data.map(\n            (d, i) =>\n              +d.year % 5 === 0 && (\n                <g key={i}>\n                  <path\n                    d={`M${x(i) + barWidth * 0.5},${\n                      timeDisLineRatio * height\n                    }V${timeDisStickRatio * height}`}\n                    stroke=\"#888\"\n                    strokeWidth=\"1\"\n                  />\n                  <text\n                    x={x(i) + barWidth * 0.5}\n                    y={timeDisStickTextRatio * height}\n                    textAnchor=\"middle\"\n                    fontSize={fontS * height}\n                    fill=\"#aaa\"\n                    // fontWeight=\"600\"\n                  >\n                    {d.year}\n                  </text>\n                </g>\n              )\n          )}\n        </g>\n      </g>\n    </g>\n  );\n};\n\nconst topicBarChartBottomRatio = 0.005;\n\nconst TopicDistribution = ({\n  data = [],\n  width = 0,\n  height = 0,\n  handleClick = () => {},\n  anaHighTag = \"\",\n}) => {\n  const topicBarChartHeightRatio = data.length > 0 ? 0.21 / data.length : 0.22;\n  const maxCount = d3.max(data.map((topicData) => d3.max(topicData.allDis)));\n  const yearCount = data.length === 0 ? 1 : data[0].allDis.length;\n  const x = (i) => ((width * heatmapRowRectsWidthRatio) / yearCount) * i;\n  const y = (count) =>\n    (height * topicBarChartHeightRatio * (maxCount - count)) / maxCount;\n\n  return (\n    <g className=\"topic-bar-chart\">\n      {data.map((topicData, i) => (\n        <g\n          key={topicData.label}\n          transform={`translate(0, ${\n            (topicBarChartHeightRatio + topicBarChartBottomRatio) * height * i\n          })`}\n          fill={topicData.color}\n          style={{ pointerEvents: \"none\" }}\n        >\n          <rect\n            x={width * 0.01}\n            y={-(y(0) - y(maxCount)) * 0.04}\n            // rx={5}\n            // ry={5}\n            height={(y(0) - y(maxCount)) * 1.08}\n            width={width * 0.98}\n            fill=\"transparent\"\n            className={`svg-shadow-hover ${\n              anaHighTag === topicData.label ? \"svg-shadow-active\" : \"\"\n            }\n            `}\n            style={{ pointerEvents: \"auto\" }}\n            onClick={() => handleClick(i)}\n          />\n          <text\n            x={heatmapRowLabelWidthRatio * width}\n            y={topicBarChartHeightRatio * height * 0.42}\n            fontSize={fontS * height}\n            fontWeight=\"600\"\n            textAnchor=\"end\"\n          >\n            {topicData.label}\n          </text>\n          <text\n            x={heatmapRowLabelWidthRatio * width}\n            y={topicBarChartHeightRatio * height * 0.92}\n            fontSize={fontS * height}\n            fontWeight=\"600\"\n            textAnchor=\"end\"\n          >\n            {topicData.highlightCount}/{topicData.allCount}\n          </text>\n          <g\n            className=\"topic-bar-chart-background-bars\"\n            transform={`translate(${\n              width *\n              (heatmapRowLabelWidthRatio + heatmapRowRectsLeftPaddingRatio)\n            }, 0)`}\n          >\n            {topicData.allDis.map((count, j) => (\n              <rect\n                key={j}\n                x={x(j)}\n                y={y(count)}\n                width={((width * heatmapRowRectsWidthRatio) / yearCount) * 0.8}\n                fill={'#ccc'}\n                height={y(0) - y(count)}\n              />\n            ))}\n          </g>\n          <g\n            className=\"topic-bar-chart-active-bars\"\n            transform={`translate(${\n              width *\n              (heatmapRowLabelWidthRatio + heatmapRowRectsLeftPaddingRatio)\n            }, 0)`}\n          >\n            {topicData.highLightDis.map((count, j) => (\n              <rect\n                key={j}\n                x={x(j)}\n                y={y(count)}\n                width={((width * heatmapRowRectsWidthRatio) / yearCount) * 0.8}\n                height={y(0) - y(count)}\n              />\n            ))}\n          </g>\n        </g>\n      ))}\n    </g>\n  );\n};\n\nconst HeatmapContent = ({\n  icon = \"\",\n  title = \"\",\n  children = <></>,\n  height = 0,\n  width = 0,\n}) => {\n  const titleContentHeight = height * heatmapTitleRatio;\n  return (\n    <>\n      <g className=\"heatmap-title-g\">\n        <rect\n          className=\"heatmap-title-background\"\n          x=\"20\"\n          y={titleContentHeight * 0.05}\n          width={heatmapRowLabelWidthRatio * width - 20}\n          height={titleContentHeight * 0.8}\n          // fill=\"url(#grad1)\"\n          fill=\"#999\"\n        />\n        <g className=\"heatmap-title-content\">\n          {/* <icon /> */}\n          <text\n            x={heatmapRowLabelWidthRatio * width * 0.5 + 10}\n            y={titleContentHeight * 0.64}\n            fontSize={fontS * height}\n            fill=\"#fff\"\n            fontWeight=\"600\"\n            textAnchor=\"middle\"\n          >\n            {title}\n          </text>\n        </g>\n      </g>\n      <g\n        className=\"heatmap-rows-g\"\n        transform={`translate(0, ${titleContentHeight})`}\n      >\n        {children}\n      </g>\n    </>\n  );\n};\n\nconst HeatMap = ({\n  data = [],\n  width = 0,\n  height = 0,\n  handleClick = () => {},\n  anaHighTag = \"\",\n}) => {\n  const yearCount = data.length > 0 ? data[0].all_timeDis.length : 1;\n  const rectWidth = (width * heatmapRowRectsWidthRatio) / yearCount;\n  const heatmapRowStyle = (i) => ({\n    transform: `translateY(${ratio(heatmapRowRatio * i)})`,\n  });\n  const color = (count) => {\n    if (count === 0) return \"transparent\";\n    const index = count >= heatmapColors.length ? heatmapColors.length : count;\n    return heatmapColors[index - 1];\n  };\n  return (\n    <g style={{ pointerEvents: \"none\" }}>\n      {data.map((d, i) => (\n        <g className=\"heatmap-row-g\" key={d.label} style={heatmapRowStyle(i)}>\n          <rect\n            x={width * 0.01}\n            y={-heatmapRectHeightRatio * height * 0.1}\n            // rx={5}\n            // ry={5}\n            height={heatmapRectHeightRatio * height * 1.2}\n            width={width * 0.98}\n            fill=\"transparent\"\n            className={`svg-shadow-hover ${\n              anaHighTag === d.label ? \"svg-shadow-active\" : \"\"\n            }`}\n            style={{ pointerEvents: \"auto\" }}\n            onClick={() => handleClick(d.label)}\n          />\n          {d.label.length > 13 ? (\n            <text\n              x={width * heatmapRowLabelWidthRatio}\n              y={ratio(heatmapRectHeightRatio - 0.004)}\n              fontSize={fontS * height}\n              fill=\"#666\"\n              textAnchor=\"end\"\n              // textLength=\"100\"\n              // lengthAdjust=\"spacingAndGlyphs\"\n            >\n              {d.label.length > 13 ? `${d.label.slice(0, 11)}...` : d.label}\n              {/* {d.label} */}\n            </text>\n          ) : (\n            <text\n              x={width * heatmapRowLabelWidthRatio}\n              y={ratio(heatmapRectHeightRatio - 0.004)}\n              fontSize={fontS * height}\n              fill=\"#666\"\n              textAnchor=\"end\"\n            >\n              {d.label}\n            </text>\n          )}\n\n          <g\n            className=\"heatmap-row-background-rects-g\"\n            transform={`translate(${\n              width *\n              (heatmapRowLabelWidthRatio + heatmapRowRectsLeftPaddingRatio)\n            }, 0)`}\n          >\n            {d.all_timeDis.map((count, i) => (\n              <rect\n                key={i}\n                x={rectWidth * i}\n                y=\"0\"\n                width={rectWidth * heatmapRectWidthRatio}\n                height={heatmapRectHeightRatio * height}\n                fill={count > 0 ? \"#ddd\" : \"transparent\"}\n                opacity={0.8}\n              />\n            ))}\n          </g>\n\n          <g\n            className=\"heatmap-row-highlight-rects-g\"\n            transform={`translate(${\n              width *\n              (heatmapRowLabelWidthRatio + heatmapRowRectsLeftPaddingRatio)\n            }, 0)`}\n          >\n            {d.highlight_timeDis.map((count, i) => (\n              <rect\n                key={i}\n                x={rectWidth * i}\n                y=\"0\"\n                width={rectWidth * heatmapRectWidthRatio}\n                height={heatmapRectHeightRatio * height}\n                fill={color(count)}\n                opacity={0.8}\n              />\n            ))}\n          </g>\n        </g>\n      ))}\n    </g>\n  );\n};\n\nexport default StatisticsView;\n",["225","226"],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/PapersTable/index.js",["227","228","229","230","231","232","233"],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/TopicView-New/index.js",[],"/home/mintian/pku/vis/paper_management_system/src/Pages/AnalysisPage/HoverTooltip/index.js",["234","235","236","237"],{"ruleId":"238","severity":1,"message":"239","line":13,"column":35,"nodeType":"240","messageId":"241","endLine":13,"endColumn":41},{"ruleId":"242","severity":1,"message":"243","line":572,"column":59,"nodeType":"244","messageId":"245","endLine":572,"endColumn":61},{"ruleId":"242","severity":1,"message":"243","line":578,"column":59,"nodeType":"244","messageId":"245","endLine":578,"endColumn":61},{"ruleId":"242","severity":1,"message":"243","line":595,"column":36,"nodeType":"244","messageId":"245","endLine":595,"endColumn":38},{"ruleId":"242","severity":1,"message":"243","line":603,"column":36,"nodeType":"244","messageId":"245","endLine":603,"endColumn":38},{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","replacedBy":"249"},{"ruleId":"246","replacedBy":"250"},{"ruleId":"248","replacedBy":"251"},{"ruleId":"246","replacedBy":"252"},{"ruleId":"248","replacedBy":"253"},{"ruleId":"246","replacedBy":"254"},{"ruleId":"248","replacedBy":"255"},{"ruleId":"256","severity":1,"message":"257","line":14,"column":6,"nodeType":"258","endLine":14,"endColumn":8,"suggestions":"259"},{"ruleId":"246","replacedBy":"260"},{"ruleId":"248","replacedBy":"261"},{"ruleId":"256","severity":1,"message":"257","line":22,"column":6,"nodeType":"258","endLine":22,"endColumn":8,"suggestions":"262"},{"ruleId":"246","replacedBy":"263"},{"ruleId":"248","replacedBy":"264"},{"ruleId":"246","replacedBy":"265"},{"ruleId":"248","replacedBy":"266"},{"ruleId":"238","severity":1,"message":"267","line":1,"column":35,"nodeType":"240","messageId":"241","endLine":1,"endColumn":44},{"ruleId":"238","severity":1,"message":"268","line":13,"column":10,"nodeType":"240","messageId":"241","endLine":13,"endColumn":14},{"ruleId":"238","severity":1,"message":"269","line":15,"column":7,"nodeType":"240","messageId":"241","endLine":15,"endColumn":12},{"ruleId":"246","replacedBy":"270"},{"ruleId":"248","replacedBy":"271"},{"ruleId":"246","replacedBy":"272"},{"ruleId":"248","replacedBy":"273"},{"ruleId":"256","severity":1,"message":"274","line":40,"column":6,"nodeType":"258","endLine":40,"endColumn":8,"suggestions":"275"},{"ruleId":"246","replacedBy":"276"},{"ruleId":"248","replacedBy":"277"},{"ruleId":"256","severity":1,"message":"278","line":25,"column":8,"nodeType":"258","endLine":25,"endColumn":10,"suggestions":"279"},{"ruleId":"238","severity":1,"message":"280","line":70,"column":13,"nodeType":"240","messageId":"241","endLine":70,"endColumn":27},{"ruleId":"256","severity":1,"message":"281","line":134,"column":8,"nodeType":"258","endLine":134,"endColumn":20,"suggestions":"282"},{"ruleId":"238","severity":1,"message":"283","line":160,"column":15,"nodeType":"240","messageId":"241","endLine":160,"endColumn":28},{"ruleId":"256","severity":1,"message":"284","line":169,"column":8,"nodeType":"258","endLine":169,"endColumn":29,"suggestions":"285"},{"ruleId":"238","severity":1,"message":"286","line":1,"column":23,"nodeType":"240","messageId":"241","endLine":1,"endColumn":31},{"ruleId":"238","severity":1,"message":"287","line":4,"column":10,"nodeType":"240","messageId":"241","endLine":4,"endColumn":23},{"ruleId":"238","severity":1,"message":"288","line":6,"column":10,"nodeType":"240","messageId":"241","endLine":6,"endColumn":23},{"ruleId":"238","severity":1,"message":"289","line":20,"column":5,"nodeType":"240","messageId":"241","endLine":20,"endColumn":21},{"ruleId":"256","severity":1,"message":"257","line":34,"column":6,"nodeType":"258","endLine":34,"endColumn":8,"suggestions":"290"},{"ruleId":"256","severity":1,"message":"291","line":130,"column":6,"nodeType":"258","endLine":130,"endColumn":61,"suggestions":"292"},{"ruleId":"256","severity":1,"message":"293","line":482,"column":6,"nodeType":"258","endLine":482,"endColumn":78,"suggestions":"294"},{"ruleId":"242","severity":1,"message":"243","line":30,"column":64,"nodeType":"244","messageId":"245","endLine":30,"endColumn":66},{"ruleId":"256","severity":1,"message":"295","line":262,"column":6,"nodeType":"258","endLine":262,"endColumn":13,"suggestions":"296"},{"ruleId":"238","severity":1,"message":"297","line":15,"column":5,"nodeType":"240","messageId":"241","endLine":15,"endColumn":23},{"ruleId":"238","severity":1,"message":"298","line":19,"column":5,"nodeType":"240","messageId":"241","endLine":19,"endColumn":24},{"ruleId":"238","severity":1,"message":"289","line":21,"column":5,"nodeType":"240","messageId":"241","endLine":21,"endColumn":21},{"ruleId":"256","severity":1,"message":"257","line":42,"column":6,"nodeType":"258","endLine":42,"endColumn":8,"suggestions":"299"},{"ruleId":"246","replacedBy":"300"},{"ruleId":"248","replacedBy":"301"},{"ruleId":"238","severity":1,"message":"286","line":1,"column":17,"nodeType":"240","messageId":"241","endLine":1,"endColumn":25},{"ruleId":"238","severity":1,"message":"302","line":7,"column":10,"nodeType":"240","messageId":"241","endLine":7,"endColumn":13},{"ruleId":"238","severity":1,"message":"303","line":11,"column":7,"nodeType":"240","messageId":"241","endLine":11,"endColumn":12},{"ruleId":"238","severity":1,"message":"304","line":79,"column":5,"nodeType":"240","messageId":"241","endLine":79,"endColumn":17},{"ruleId":"238","severity":1,"message":"305","line":87,"column":5,"nodeType":"240","messageId":"241","endLine":87,"endColumn":22},{"ruleId":"242","severity":1,"message":"243","line":111,"column":55,"nodeType":"244","messageId":"245","endLine":111,"endColumn":57},{"ruleId":"242","severity":1,"message":"243","line":114,"column":64,"nodeType":"244","messageId":"245","endLine":114,"endColumn":66},{"ruleId":"242","severity":1,"message":"243","line":122,"column":54,"nodeType":"244","messageId":"245","endLine":122,"endColumn":56},{"ruleId":"242","severity":1,"message":"243","line":123,"column":59,"nodeType":"244","messageId":"245","endLine":123,"endColumn":61},{"ruleId":"256","severity":1,"message":"306","line":343,"column":6,"nodeType":"258","endLine":343,"endColumn":13,"suggestions":"307"},{"ruleId":"246","replacedBy":"308"},{"ruleId":"248","replacedBy":"309"},{"ruleId":"238","severity":1,"message":"287","line":5,"column":10,"nodeType":"240","messageId":"241","endLine":5,"endColumn":23},{"ruleId":"238","severity":1,"message":"310","line":6,"column":13,"nodeType":"240","messageId":"241","endLine":6,"endColumn":15},{"ruleId":"238","severity":1,"message":"311","line":7,"column":10,"nodeType":"240","messageId":"241","endLine":7,"endColumn":15},{"ruleId":"238","severity":1,"message":"312","line":7,"column":17,"nodeType":"240","messageId":"241","endLine":7,"endColumn":20},{"ruleId":"238","severity":1,"message":"313","line":7,"column":22,"nodeType":"240","messageId":"241","endLine":7,"endColumn":27},{"ruleId":"238","severity":1,"message":"268","line":9,"column":10,"nodeType":"240","messageId":"241","endLine":9,"endColumn":14},{"ruleId":"238","severity":1,"message":"304","line":18,"column":5,"nodeType":"240","messageId":"241","endLine":18,"endColumn":17},{"ruleId":"238","severity":1,"message":"287","line":5,"column":10,"nodeType":"240","messageId":"241","endLine":5,"endColumn":23},{"ruleId":"238","severity":1,"message":"310","line":6,"column":13,"nodeType":"240","messageId":"241","endLine":6,"endColumn":15},{"ruleId":"238","severity":1,"message":"314","line":10,"column":9,"nodeType":"240","messageId":"241","endLine":10,"endColumn":14},{"ruleId":"238","severity":1,"message":"315","line":11,"column":9,"nodeType":"240","messageId":"241","endLine":11,"endColumn":15},"no-unused-vars","'find_d' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["316"],"no-negated-in-lhs",["317"],["316"],["317"],["316"],["317"],["316"],["317"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'store'. Either include it or remove the dependency array.","ArrayExpression",["318"],["316"],["317"],["319"],["316"],["317"],["316"],["317"],"'useEffect' is defined but never used.","'toJS' is defined but never used.","'debug' is assigned a value but never used.",["316"],["317"],["316"],["317"],"React Hook useEffect has missing dependencies: 'tag2color', 'tagData.list', and 'tagData.value'. Either include them or remove the dependency array.",["320"],["316"],["317"],"React Hook useEffect has missing dependencies: 'initYearRange' and 'onInput'. Either include them or remove the dependency array. If 'onInput' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["321"],"'highlightBarsG' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data', 'height', 'initYearRange', 'onChange', 'onInput', 'setAnaFilterType', 'setClearBrushTrigger', and 'width'. Either include them or remove the dependency array. If 'setClearBrushTrigger' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["322"],"'highlightBars' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'height' and 'width'. Either include them or remove the dependency array.",["323"],"'useState' is defined but never used.","'useClientRect' is defined but never used.","'anaSvgPadding' is defined but never used.","'defaultHighColor' is assigned a value but never used.",["324"],"React Hook useEffect has missing dependencies: 'height', 'resetProjectionFlag', 'setAnaSelectHighlightPaper', 'topicColorScale', 'x', and 'y'. Either include them or remove the dependency array.",["325"],"React Hook useEffect has missing dependencies: 'analysisPapers', 'num_topics', 'topicColorScale', 'x', and 'y'. Either include them or remove the dependency array.",["326"],"React Hook useEffect has missing dependencies: 'analysisPapers', 'rectHeight', 'rectWidth', 'setAnaSelectHighlightPaper', 'svg', 'topicColorScale', 'x', and 'y'. Either include them or remove the dependency array.",["327"],"'drawProjectionFlag' is assigned a value but never used.","'resetProjectionFlag' is assigned a value but never used.",["328"],["316"],["317"],"'get' is defined but never used.","'fontM' is assigned a value but never used.","'anaHighTopic' is assigned a value but never used.","'clearBrushTrigger' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'brush' and 'setClearBrushTrigger'. Either include them or remove the dependency array. If 'setClearBrushTrigger' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["329"],["316"],["317"],"'d3' is defined but never used.","'Table' is defined but never used.","'Tag' is defined but never used.","'Space' is defined but never used.","'width' is assigned a value but never used.","'height' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"330","fix":"331"},{"desc":"330","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"330","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},{"desc":"330","fix":"348"},{"desc":"349","fix":"350"},"Update the dependencies array to be: [store]",{"range":"351","text":"352"},{"range":"353","text":"352"},"Update the dependencies array to be: [tag2color, tagData.list, tagData.value]",{"range":"354","text":"355"},"Update the dependencies array to be: [initYearRange, onInput]",{"range":"356","text":"357"},"Update the dependencies array to be: [clientRect, data, height, initYearRange, onChange, onInput, setAnaFilterType, setClearBrushTrigger, width]",{"range":"358","text":"359"},"Update the dependencies array to be: [data, anaFilterType, width, height]",{"range":"360","text":"361"},{"range":"362","text":"352"},"Update the dependencies array to be: [width, drawProjectionFlag, num_topics, analysisPapers, topicColorScale, height, x, y, setAnaSelectHighlightPaper, resetProjectionFlag]",{"range":"363","text":"364"},"Update the dependencies array to be: [anaHighPapers, anaFilterType, anaHighTopic, anaSelectHighlightPaperDoi, num_topics, analysisPapers, x, y, topicColorScale]",{"range":"365","text":"366"},"Update the dependencies array to be: [analysisPapers, rectHeight, rectWidth, setAnaSelectHighlightPaper, svg, topicColorScale, width, x, y]",{"range":"367","text":"368"},{"range":"369","text":"352"},"Update the dependencies array to be: [brush, setClearBrushTrigger, width]",{"range":"370","text":"371"},[361,363],"[store]",[746,748],[1242,1244],"[tag2color, tagData.list, tagData.value]",[692,694],"[initYearRange, onInput]",[3996,4008],"[clientRect, data, height, initYearRange, onChange, onInput, setAnaFilterType, setClearBrushTrigger, width]",[5104,5125],"[data, anaFilterType, width, height]",[839,841],[3548,3603],"[width, drawProjectionFlag, num_topics, analysisPapers, topicColorScale, height, x, y, setAnaSelectHighlightPaper, resetProjectionFlag]",[15188,15260],"[anaHighPapers, anaFilterType, anaHighTopic, anaSelectHighlightPaperDoi, num_topics, analysisPapers, x, y, topicColorScale]",[7576,7583],"[analysisPapers, rectHeight, rectWidth, setAnaSelectHighlightPaper, svg, topicColorScale, width, x, y]",[1086,1088],[9844,9851],"[brush, setClearBrushTrigger, width]"]